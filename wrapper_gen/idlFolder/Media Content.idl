module MediaContent {

  enum MediaFolderStorageType { "INTERNAL", "EXTERNAL", "UNKNOWN" };

  enum MediaItemType { "IMAGE", "VIDEO", "AUDIO", "UNKNOWN" };

  enum MediaLyricsType { "SYNCHRONIZED", "UNSYNCHRONIZED" };

  enum MediaImageOrientation { "NORMAL", "FLIP_HORIZONTAL", "ROTATE_180", "FLIP_VERTICAL", "TRANSPOSE", "ROTATE_90", "TRANSVERSE", "ROTATE_270" };

  typedef DOMString MediaItemId;
  
  typedef DOMString MediaFolderId;
 
  [NoInterfaceObject] interface MediaSourceManagerObject {
    readonly attribute MediaSourceManager mediacontent;
  };
  Tizen implements MediaSourceManagerObject;

  [NoInterfaceObject] interface MediaSourceManager {
    MediaSource getLocalMediaSource();
  };

  [NoInterfaceObject] interface MediaSource {

    void updateItem(MediaItem item);  

    void updateItemsBatch(MediaItem[] items,
                                      SuccessCallback successCallback,
                                      optional ErrorCallback? errorCallback);

    void getFolders(MediaFolderArraySuccessCallback successCallback,
                     optional ErrorCallback? errorCallback);

    void findItems(MediaItemArraySuccessCallback successCallback,
                   optional ErrorCallback? errorCallback,
                   optional MediaFolderId? folderId,
                   optional AbstractFilter? filter,
                   optional SortMode? sortMode,
                   optional unsigned long? count,
                   optional unsigned long? offset);

};

  [Callback=FunctionOnly, NoInterfaceObject] interface MediaItemArraySuccessCallback {
    void onsuccess(MediaItem[] items);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface MediaFolderArraySuccessCallback {
    void onsuccess(MediaFolder[] folders);
  };  

  [NoInterfaceObject] interface MediaFolder {

    readonly attribute MediaFolderId id;

    readonly attribute DOMString? folderURI;

    readonly attribute DOMString title;

    readonly attribute MediaFolderStorageType storageType;

    readonly attribute Date? modifiedDate;

   };

  [NoInterfaceObject] interface MediaItem {

    readonly attribute DOMString[] editableAttributes;

    readonly attribute MediaItemId id;

    readonly attribute MediaItemType type;

    readonly attribute DOMString mimeType;

    attribute DOMString title;

    readonly attribute DOMString itemURI;

    readonly attribute DOMString[]? thumbnailURIs;

    readonly attribute Date? releaseDate;

    readonly attribute Date? modifiedDate;

    readonly attribute unsigned long? size;

    attribute DOMString? description;

    attribute float? rating;
  };

  [NoInterfaceObject] interface MediaVideo : MediaItem {

    attribute SimpleCoordinates? geolocation;

    attribute DOMString? album;

    attribute DOMString[]? artists;

    readonly attribute unsigned long duration;

    readonly attribute unsigned long width;  

    readonly attribute unsigned long height;      

    attribute unsigned long? playedTime;

    attribute unsigned long? playCount;
  };


  [NoInterfaceObject] interface MediaLyrics {
  
    readonly attribute MediaLyricsType type;

    readonly attribute unsigned long[] timestamps;
    
    readonly attribute DOMString[] texts;
  };
    
  [NoInterfaceObject] interface MediaAudio : MediaItem {

    attribute DOMString? album;

    attribute DOMString[]? genres;

    attribute DOMString[]? artists;

    attribute DOMString[]? composers;

    readonly attribute MediaLyrics? lyrics;

    readonly attribute DOMString? copyright;

    readonly attribute unsigned long? bitrate;

    attribute unsigned short? trackNumber;

    readonly attribute unsigned long duration;

    attribute unsigned long? playedTime;

    attribute unsigned long? playCount;
  };

  [NoInterfaceObject] interface MediaImage : MediaItem {

    attribute SimpleCoordinates? geolocation;

    readonly attribute unsigned long width;  

    readonly attribute unsigned long height;      

    attribute MediaImageOrientation? orientation;

  };
};