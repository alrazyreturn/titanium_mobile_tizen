module Application {

    typedef DOMString ApplicationId;


    typedef DOMString ApplicationContextId;


    [NoInterfaceObject] interface ApplicationObject {
        readonly attribute Application application;
    };
    Tizen implements ApplicationObject;


    [NoInterfaceObject] interface Application {

        void launch(ApplicationId id,
                    optional SuccessCallback? successCallback,
                    optional ErrorCallback? errorCallback,
                    optional DOMString[]? argument);



        void kill(ApplicationContextId contextId,
                  optional SuccessCallback? successCallback,
                  optional ErrorCallback? errorCallback);



        void exit();



        void hide();


        void launchService(ApplicationService service,
                           ApplicationId? id,
                           optional SuccessCallback? successCallback,
                           optional ErrorCallback? errorCallback,
                           optional ApplicationServiceDataArrayReplyCallback? replyCallback);



        ApplicationService getAppService();



        void getAppsContext(ApplicationContextArraySuccessCallback successCallback,
                            optional ErrorCallback? errorCallback);



        ApplicationContext getAppContext(optional ApplicationContextId? id);



        void getAppsInfo(ApplicationInformationArraySuccessCallback successCallback,
                         optional ErrorCallback? errorCallback);



        ApplicationInformation getAppInfo(optional ApplicationId? id);



        long addAppInfoEventListener(ApplicationInformationEventCallback eventCallback,
                                     optional ErrorCallback? errorCallback);



        void removeAppInfoEventListener(long listenerID);

    };


    [NoInterfaceObject] interface ApplicationInformation {

        readonly attribute ApplicationId id;

        readonly attribute DOMString name;

        readonly attribute DOMString iconPath;

        readonly attribute DOMString version;

        readonly attribute boolean show;

        readonly attribute Date installDate;

        readonly attribute long size;
    };


    [NoInterfaceObject] interface ApplicationContext {

        readonly attribute ApplicationContextId id;

        readonly attribute ApplicationId appId;
    };

    [Constructor(DOMString key, DOMString[] value)]

    interface ApplicationServiceData {

        attribute DOMString key;


        attribute DOMString[] value;
    };

    [Constructor(DOMString operation),
     Constructor(DOMString operation, optional DOMString? uri, 
                 optional DOMString? mime, optional ApplicationServiceData[]? data)]

    interface ApplicationService {

        attribute DOMString operation;


        attribute DOMString? uri;


        attribute DOMString? mime;


        attribute ApplicationServiceData[] data;


        void replyResult(optional ApplicationServiceData[]? data);


        void replyFailure();
    };


    [Callback=FunctionOnly, NoInterfaceObject] interface ApplicationInformationArraySuccessCallback {

        void onsuccess(ApplicationInformation[] informationArray);
    };


    [Callback=FunctionOnly, NoInterfaceObject] interface ApplicationContextArraySuccessCallback {

        void onsuccess(ApplicationContext[] contexts);
    };


    [Callback, NoInterfaceObject] interface ApplicationServiceDataArrayReplyCallback {

        void onsuccess(optional ApplicationServiceData[]? data);


        void onfail();
    };


    [Callback, NoInterfaceObject] interface ApplicationInformationEventCallback {

        void oninstalled(ApplicationInformation info);


        void onupdated(ApplicationInformation info);


        void onuninstalled(ApplicationId id);
    };

};