module Calendar {
  typedef DOMString CalendarId;
  
  typedef DOMString CalendarTaskId;
  
  typedef (CalendarEventId or CalendarTaskId) CalendarItemId;
  
  enum CalendarType { "EVENT", "TASK" };
  
  enum CalendarTextFormat { "ICALENDAR_20", "VCALENDAR_10" };
  
  enum AlarmMethod { "SOUND", "DISPLAY" };
  
  
  enum RecurrenceRuleFrequency { "DAILY", "WEEKLY", "MONTHLY", "YEARLY" };
  
  enum ByDayValue { "MO", "TU", "WE", "TH", "FR", "SA", "SU" };
  
  enum EventAvailability { "BUSY", "FREE" };
  
  enum AttendeeType { "INDIVIDUAL", "GROUP", "RESOURCE", "ROOM", "UNKNOWN" };
  
  enum AttendeeStatus { "PENDING", "ACCEPTED", "DECLINED", "TENTATIVE", "DELEGATED", "COMPLETED", "IN_PROCESS" };
  
  enum AttendeeRole { "REQ_PARTICIPANT", "OPT_PARTICIPANT", "NON_PARTICIPANT", "CHAIR" };
  
  enum CalendarItemPriority { "HIGH", "MEDIUM", "LOW" };
  
   enum CalendarItemVisibility { "PUBLIC", "PRIVATE", "CONFIDENTIAL" };
   
   enum CalendarItemStatus { "TENTATIVE", "CONFIRMED", "CANCELLED", "NEEDS_ACTION", "IN_PROCESS", "COMPLETED" };
  
  [NoInterfaceObject] interface CalendarManagerObject{
    readonly attribute CalendarManager calendar; 
  };
  Tizen implements CalendarManagerObject;    

  [NoInterfaceObject] interface CalendarManager {
    void getCalendars(CalendarType type,
                      CalendarArraySuccessCallback successCallback,
                      optional ErrorCallback? errorCallback);

    Calendar getDefaultCalendar(CalendarType type);
    
    Calendar getCalendar(CalendarType type, CalendarId id);
  };

  [NoInterfaceObject] interface Calendar {
    
    readonly attribute CalendarId id;

    readonly attribute DOMString name;
                              
    CalendarItem get(CalendarItemId id);

    void add(CalendarItem item);

    void addBatch(CalendarItem[] items,
                  optional CalendarItemArraySuccessCallback? successCallback,
                  optional ErrorCallback? errorCallback);

    void update(CalendarItem item,
                optional boolean? updateAllInstances);

     void updateBatch(CalendarItem[] items,
                     optional SuccessCallback? successCallback,
                     optional ErrorCallback? errorCallback,
                     optional boolean? updateAllInstances);

    void remove(CalendarItemId id);

    void removeBatch(CalendarItemId[] ids,
                     optional SuccessCallback? successCallback,
                     optional ErrorCallback? errorCallback);
 
    void find(CalendarItemArraySuccessCallback successCallback,
              optional ErrorCallback? errorCallback,
              optional AbstractFilter? filter,
              optional SortMode? sortMode);
                                
    long addChangeListener(CalendarChangeCallback successCallback);
                      
    void removeChangeListener(long watchId);
  };
  
  dictionary CalendarItemInit {
    DOMString description;
    DOMString summary;
    boolean isAllDay;
    TZDate startDate;
    TimeDuration duration;
    DOMString location;
    SimpleCoordinates geolocation;
    DOMString organizer;
    CalendarItemVisibility visibility;
    CalendarItemStatus status;
    CalendarItemPriority priority;
    CalendarAlarm[] alarms;
    DOMString[] categories;
    CalendarAttendee[] attendees;
  };
  
  dictionary CalendarTaskInit: CalendarItemInit {
    TZDate dueDate;
    TZDate completedDate;
    short progress;
  };

  dictionary CalendarEventInit: CalendarItemInit {
    TZDate endDate;
    EventAvailability availability;
    CalendarRecurrenceRule recurrenceRule;
  };
  
  [NoInterfaceObject] interface CalendarItem {
    readonly attribute CalendarItemId id;
    
    readonly attribute TZDate? lastModificationDate;
    
    attribute DOMString? description;
    
    attribute DOMString? summary;
    
    attribute boolean isAllDay;
    
    attribute TZDate? startDate;
    
    attribute TimeDuration? duration;
    
    attribute DOMString? location;
    
    attribute SimpleCoordinates? geolocation;
    
    attribute DOMString? organizer;
    
    attribute CalendarItemVisibility visibility;
    
    attribute CalendarItemStatus status;
    
    attribute CalendarItemPriority priority;
    
    attribute CalendarAlarm[] alarms;
    
    attribute DOMString[] categories;
    
    attribute CalendarAttendee[] attendees;
    
    DOMString convertToString(CalendarTextFormat format);

    CalendarItem clone();
  };
  
  [Constructor(optional CalendarTaskInit? taskInitDict),
   Constructor(DOMString stringRepresentation, CalendarTextFormat format)]
  interface CalendarTask : CalendarItem {
    attribute TZDate? dueDate;
    
    attribute TZDate? completedDate;
    
    attribute unsigned short progress;
  };

  [Constructor(optional CalendarEventInit? eventInitDict),
   Constructor(DOMString stringRepresentation, CalendarTextFormat format)]
  interface CalendarEvent : CalendarItem {
    readonly attribute boolean isDetached;
    
    attribute TZDate? endDate;
    
    attribute EventAvailability availability;
    
    attribute CalendarRecurrenceRule? recurrenceRule;
    
    void expandRecurrence(TZDate startDate,
                          TZDate endDate,
                          CalendarEventArraySuccessCallback successCallback,
                          optional ErrorCallback? errorCallback);
  };
  
  dictionary CalendarAttendeeInit {
    DOMString name;
    AttendeeRole role;
    AttendeeStatus status;
    boolean RSVP;
    AttendeeType type;
    DOMString? group;
    DOMString delegatorURI;
    DOMString delegateURI;
    ContactRef contactRef;
  };

  [Constructor(DOMString uri, optional CalendarAttendeeInit? attendeeInitDict)]
  interface CalendarAttendee
  {
    attribute DOMString uri;
    
    attribute DOMString? name;
    
    attribute AttendeeRole role;
    
    attribute AttendeeStatus status;
    
    attribute boolean RSVP;
    
    attribute AttendeeType type;
     
    attribute DOMString? group;
      
    attribute DOMString? delegatorURI;
      
    attribute DOMString? delegateURI;
     
    attribute ContactRef? contactRef;
  };
  
  dictionary CalendarRecurrenceRuleInit {
    short interval;
    TZDate untilDate;
    long occurrenceCount;
    ByDayValue[] daysOfTheWeek;
    short[] setPositions;
    TZDate[] exceptions;
  };
  
  [Constructor(RecurrenceRuleFrequency frequency, optional CalendarRecurrenceRuleInit? ruleInitDict)]
  interface CalendarRecurrenceRule
  { 
    attribute RecurrenceRuleFrequency frequency;
    
    attribute unsigned short interval;
    
    attribute TZDate? untilDate;
    
    attribute long occurrenceCount;
    
    attribute ByDayValue[] daysOfTheWeek;
    
    attribute short[] setPositions;
    
    attribute TZDate[] exceptions;
  };
  
  [Constructor(DOMString uid, optional DOMString? rid)]
  interface CalendarEventId {
    attribute DOMString uid;
    
    attribute DOMString? rid;
  };
  
  [Constructor(TZDate absoluteDate, AlarmMethod method, optional DOMString? description),
   Constructor(TimeDuration before, AlarmMethod method, optional DOMString? description)]
  interface CalendarAlarm {
    attribute TZDate? absoluteDate;
    
    attribute TimeDuration? before;
  
    attribute AlarmMethod method;
    
    attribute DOMString? description;
  };

  [Callback=FunctionOnly, NoInterfaceObject]
  interface CalendarEventArraySuccessCallback {
    void onsuccess(CalendarEvent[] events);
  };
  
  [Callback=FunctionOnly, NoInterfaceObject]
  interface CalendarItemArraySuccessCallback {
    void onsuccess(CalendarItem[] items);
  };

  [Callback=FunctionOnly, NoInterfaceObject]
  interface CalendarArraySuccessCallback {
    void onsuccess(Calendar[] calendars);
  };
  
  [Callback, NoInterfaceObject] interface CalendarChangeCallback {
    void onitemsadded(CalendarItem[] items);
    
    void onitemsupdated(CalendarItem[] items);
    
    void onitemsremoved(CalendarItemId[] ids);
  };
};