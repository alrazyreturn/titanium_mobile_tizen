module Contact {

  typedef DOMString AddressBookId;

  typedef DOMString ContactId;

  typedef DOMString PersonId;

  typedef DOMString ContactGroupId;

  enum ContactTextFormat {"VCARD_30"};

  [NoInterfaceObject] interface ContactManagerObject {
    readonly attribute ContactManager contact;
  };
  Tizen implements ContactManagerObject;

  [NoInterfaceObject] interface ContactManager {

    void getAddressBooks(AddressBookArraySuccessCallback successCallback,
                         optional ErrorCallback? errorCallback);

    AddressBook getDefaultAddressBook();

    AddressBook getAddressBook(AddressBookId addressBookId);

    Person get(PersonId personId);

    void update(Person person);

    void updateBatch(Person[] persons,
                     optional SuccessCallback? successCallback,
                     optional ErrorCallback? errorCallback);

    void remove(PersonId personId);

    void removeBatch(PersonId[] personIds,
                     optional SuccessCallback? successCallback,
                     optional ErrorCallback? errorCallback);

    void find(PersonArraySuccessCallback successCallback,
              optional ErrorCallback? errorCallback,
              optional AbstractFilter? filter,
              optional SortMode? sortMode);

    long addChangeListener(PersonsChangeCallback successCallback);

    void removeChangeListener(long watchId);
  };

  [NoInterfaceObject] interface AddressBook {

    readonly attribute AddressBookId? id;

    readonly attribute DOMString name;
    
    readonly attribute boolean readOnly;
                             
    Contact get(ContactId id);
    
    void add(Contact contact);

    void addBatch(Contact[] contacts,
                  optional ContactArraySuccessCallback? successCallback,
                  optional ErrorCallback? errorCallback);

    void update(Contact contact);

    void updateBatch(Contact[] contacts,
                     optional SuccessCallback? successCallback,
                     optional ErrorCallback? errorCallback);

    void remove(ContactId id);

    void removeBatch(ContactId[] ids,
                     optional SuccessCallback? successCallback,
                     optional ErrorCallback? errorCallback);

    void find(ContactArraySuccessCallback successCallback,
              optional ErrorCallback? errorCallback,
              optional AbstractFilter? filter,
              optional SortMode? sortMode);

    long addChangeListener(AddressBookChangeCallback successCallback,
                           optional ErrorCallback? errorCallback);

    void removeChangeListener(long watchId);

    ContactGroup getGroup(ContactGroupId groupId);

    void addGroup(ContactGroup group);

    void updateGroup(ContactGroup group);

    void removeGroup(ContactGroupId groupId);

    ContactGroup[] getGroups();
  };

  [NoInterfaceObject] interface Person {
    readonly attribute PersonId id;

    readonly attribute DOMString displayName;

    readonly attribute long contactCount;

    readonly attribute boolean hasPhoneNumber;

    readonly attribute boolean hasEmail;

    attribute boolean isFavorite;

    attribute DOMString? photoURI;

    attribute DOMString? ringtoneURI;

    attribute ContactId displayContactId;

    void link(PersonId personId);

    Person unlink(ContactId contactId);
  };

  dictionary ContactInit {
    ContactName name;
    ContactAddress[] addresses;
    DOMString photoURI;
    ContactPhoneNumber[] phoneNumbers;
    ContactEmailAddress[] emails;
    Date birthday;
    ContactAnniversary[] anniversaries;
    ContactOrganization[] organizations;
    DOMString[] notes;
    ContactWebSite[] urls;
    DOMString ringtoneURI;
    ContactGroupId[] groupIds;
  };

  [Constructor(optional ContactInit? ContactInitDict),
   Constructor(DOMString stringRepresentation)]
  interface Contact {
    readonly attribute ContactId? id;

    readonly attribute PersonId? personId;

    readonly attribute AddressBookId? addressBookId;

    readonly attribute Date? lastUpdated;

    readonly attribute boolean isFavorite;

    attribute ContactName? name;

    attribute ContactAddress[] addresses;

    attribute DOMString? photoURI;

    attribute ContactPhoneNumber[] phoneNumbers;

    attribute ContactEmailAddress[] emails;

    attribute Date? birthday;

    attribute ContactAnniversary[] anniversaries;

    attribute ContactOrganization[] organizations;

    attribute DOMString[] notes;

    attribute ContactWebSite[] urls;

    attribute DOMString? ringtoneURI;

    attribute ContactGroupId[] groupIds;

    DOMString convertToString(optional ContactTextFormat? format);

    Contact clone();
  };

  [Constructor(AddressBookId addressBookId, ContactId contactId)]
  interface ContactRef {
    attribute AddressBookId addressBookId;

    attribute ContactId contactId;
  };

  dictionary ContactNameInit {
    DOMString prefix;
    DOMString suffix;
    DOMString firstName;
    DOMString middleName;
    DOMString lastName;
    DOMString[] nicknames;
    DOMString phoneticFirstName;
    DOMString phoneticLastName;
  };

  [Constructor(optional ContactNameInit? nameInitDict)]
  interface ContactName {
    attribute DOMString? prefix;

    attribute DOMString? suffix;

    attribute DOMString? firstName;

    attribute DOMString? middleName;

    attribute DOMString? lastName;

    attribute DOMString[] nicknames;

    attribute DOMString? phoneticFirstName;

    attribute DOMString? phoneticLastName;

    readonly attribute DOMString? displayName;
  };

  dictionary ContactOrganizationInit {
    DOMString name;
    DOMString department;
    DOMString title;
    DOMString role;
    DOMString logoURI;
  };

  [Constructor(optional ContactOrganizationInit? orgInitDict)]
  interface ContactOrganization {
    attribute DOMString? name;

    attribute DOMString? department;

    attribute DOMString? title;

    attribute DOMString? role;

    attribute DOMString? logoURI;
  };

  [Constructor(DOMString url, optional DOMString? type)]
  interface ContactWebSite
  {
    attribute DOMString url;

    attribute DOMString? type;
  };

  [Constructor(Date date, optional DOMString? label)]
  interface ContactAnniversary
  {
    attribute Date date;

    attribute DOMString? label;
  };

  dictionary ContactAddressInit
  {
    DOMString country;
    DOMString region;
    DOMString city;
    DOMString streetAddress;
    DOMString additionalInformation;
    DOMString postalCode;
    boolean isDefault;
    DOMString[] types;
  };

  [Constructor(optional ContactAddressInit? addressInitDict)]
  interface ContactAddress
  {
    attribute DOMString? country;

    attribute DOMString? region;

    attribute DOMString? city;

    attribute DOMString? streetAddress;

    attribute DOMString? additionalInformation;

    attribute DOMString? postalCode;

    attribute boolean isDefault;

    attribute DOMString[] types;
  };

  [Constructor(DOMString number, optional DOMString[]? types, optional boolean isDefault)]
  interface ContactPhoneNumber
  {
    attribute DOMString number;

    attribute boolean isDefault;

    attribute DOMString[] types;
  };

  [Constructor(DOMString email, optional DOMString[]? types, optional boolean isDefault)]
  interface ContactEmailAddress
  {
    attribute DOMString email;

    attribute boolean isDefault;

    attribute DOMString[] types;
  };

  [Constructor(DOMString name, optional DOMString? ringtoneURI, optional DOMString? photoURI)]
  interface ContactGroup
  {
    readonly attribute ContactGroupId? id;

    readonly attribute AddressBookId? addressBookId;

    attribute DOMString name;

    attribute DOMString? ringtoneURI;

    attribute DOMString? photoURI;

    readonly attribute DOMString readOnly;
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface PersonArraySuccessCallback {
    void onsuccess(Person[] persons);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface ContactArraySuccessCallback {
    void onsuccess(Contact[] contacts);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface AddressBookArraySuccessCallback {
    void onsuccess(AddressBook[] addressbooks);
  };

  [Callback, NoInterfaceObject] interface AddressBookChangeCallback {
    void oncontactsadded(Contact[] contacts);

    void oncontactsupdated(Contact[] contacts);

    void oncontactsremoved(ContactId[] contactIds);
  };

  [Callback, NoInterfaceObject] interface PersonsChangeCallback {
    void onpersonsadded(Person[] persons);

    void onpersonsupdated(Person[] persons);

    void onpersonsremoved(PersonId[] personIds);
  };
};