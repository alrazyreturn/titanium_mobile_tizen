---
name: Tizen.Messaging.MessageStorage
summary: MessageStorage management capabilities. 
description: |
    This interface allows a web application to query, update, and delete messages, and subscribe to MessageStorage changes. In addition to simple message queries, the MessageStorage interface provides functionality to find conversations and folders.
    The conversation object represents a group of messages combined by the set of message fields. Email conversations are grouped by subject, while chat messages are grouped by sender and recipient fields.
extends: Titanium.Proxy
platforms: [tizen]
createable: false

methods:
  - name: addDraftMessage
    summary: Adds a draft message to MessageStorage. 
    description: |
        Added messages would be stored in the Drafts folder.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.write
    parameters: 
      - name: message
        summary:  Draft message that should be added to the storage. 
        type: Tizen.Messaging.Message

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse> 
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            
            // Define success callback
            function successCallback() {
                console.log("Draft message added");
            }
            // Define error callback
            function errorCallback(error) {
                console.log("Cannot add draft message " + error.message);
            }
            // Define service query success callback.
            function serviceListCB(services) {
                if (services.length > 0) {
                    var msg = tizen.Messaging.createMessage({type: tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_SMS,
                                                             messageInitDict: {plainBody: 'Tizen draft SMS message.'}});
                    services[0].messageStorage.addDraftMessage(msg, successCallback, errorCallback);
                }
            }
            tizen.Messaging.getMessageServices(tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_SMS, serviceListCB);

  - name: findMessages
    summary: Queries messages from MessageStorage. 
    description: |
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.read
    parameters: 
      - name: filter
        summary: Criteria to be used when filtering. 
        type: Tizen.AbstractFilter 

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<FindMessageResponse>

      - name: sort
        summary: Sorting mode for the query. 
        type: Tizen.SortMode
        optional: true

      - name: limit
        summary: Parameter for limiting query result. 
        type: Number
        optional: true

      - name: offset
        summary:  Define offset of the query.
        type: Number
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage; 
            function messageArrayCB(messages) {
                console.log(messages.length + " message(s) fetched!");
                for (var i = 0; i < messages.length; i++) {
                  console.log(i + ". message from " + messages[i].from);
                }
            }
            // Define error callback
            function errorCallback(error) {
                console.log("Cannot query messages" + error.message);
            }
            var filter = tizen.createAttributeFilter({attributeName: 'from',
                                                      matchFlag: tizen.FILTER_MATCH_FLAG_CONTAINS,
                                                      matchValue: '2593'});
            messageStorage.findMessages(filter, messageArrayCB, errorCallback);

  - name: removeMessages
    summary: Deletes messages from MessageStorage. 
    description: |
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contain an invalid value
            UnknownError: In any other error case.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.write
    parameters: 
      - name: messages
        summary: Array of messages to be deleted. 
        type: Array<Tizen.Messaging.Message>

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse> 
        optional: true

    examples:
      - example: |
            // Define success callback
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage; 
            var tizen = require("tizen");
            
            function successCallback() {
                console.log("Messages were deleted");
            }
            // Define error callback
            function errorCallback(error) {
                console.log("Cannot delete messages " + error.message);
            }
            function messageArrayCB(messages) {
                messageStorage.removeMessages(messages, successCallback, errorCallback);
            }
            var filter = tizen.createAttributeFilter({attributeName: 'from',
                                                      matchFlag: tizen.FILTER_MATCH_FLAG_CONTAINS,
                                                      matchValue: '2593'});
            messageStorage.findMessages(filter, messageArrayCB);

  - name: updateMessages
    summary: Updates messages in MessageStorage. 
    description: |
        The backend MUST check whether the required updates can be applied and invoke the callback function with error message, if they cannot. Depending on the backend synchronization settings, the local changes in Tizen.Messaging.MessageStorage might be rewritten as a result of invoking the [sync](Tizen.Messaging.MessageService.sync) or [syncFolder](Tizen.Messaging.MessageService.syncFolder) methods of the related message service.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.write
    parameters: 
      - name: messages
        summary: Array that should be updated. 
        type: Array<Tizen.Messaging.Message>

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse> 
        optional: true
    examples:
      - example: |
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage;
            var tizen = require("tizen");
            
            // Define success callback
            function successCallback() {
                console.log("Messages were updated");
            }
            // Define error callback
            function errorCallback(error) {
                console.log("Cannot update messages " + error.message);
            }
            function messageArrayCB(messages) {
                messages[0].isRead = true;
                messageStorage.updateMessages(messages, successCallback, errorCallback);
            }
            var filter = tizen.createAttributeFilter({attributeName: 'isRead',
                                                      matchFlag: tizen.FILTER_MATCH_FLAG_EXACTLY,
                                                      matchValue: 'false'});
            messageStorage.findMessages(filter, messageArrayCB);

  - name: findConversations
    summary: Queries conversations from MessageStorage. 
    description: | 
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.read
    parameters: 
      - name: filter
        summary: Criteria to be used when filtering. 
        type: Tizen.AbstractFilter 

      - name: callback
        summary:  Function to invoke on success or failure.
        type: Callback<FindConversationsResponse>

      - name: sort
        summary: Sorting rules for the query.
        type: Tizen.SortMode
        optional: true

      - name: limit
        summary: Parameter for limiting the query result.
        type: Number
        optional: true

      - name: offset
        summary: Define offset of the query.
        type: Number
        optional: true
    examples:
      - example: |
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage;
            var tizen = require("tizen");
            
            function conversationsArrayCB(conversations) {
                console.log(conversations.length + " conversation(s) found!");
                for (var i = 0; i < conversations.length; i++) {
                    console.log(i + " . conversation preview " + conversations[i].preview);
                }
            }
            // Define error callback.
            function errorCallback(error) {
                console.log("Cannot query conversations" + error.message);
            }
            var filter = tizen.createAttributeFilter({attributeName: 'from',
                                                      matchFlag: tizen.FILTER_MATCH_FLAG_CONTAINS,
                                                      matchValue: '2593'});
            messageStorage.findConversations(filter, conversationsArrayCB, errorCallback)

  - name: removeConversations
    summary: Deletes conversations from MessageStorage. 
    description: |
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.write
    parameters: 
      - name: conversations
        summary: Array of conversations to be deleted.
        type: Array<Tizen.Messaging.MessageConversation>

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse>
        optional: true
    examples:
      - example: |
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage;
            var tizen = require("tizen");
            
            // Define success callback.
            function successCallback() {
                console.log("Conversations deleted");
            }
            // Define error callback.
            function errorCallback(error) {
                console.log("Cannot delete conversations " + error.message);
            }
            function conversationsArrayCB(conversations) {
                messageStorage.removeConversations(conversations, successCallback, errorCallback);
                console.log("Deleted " + conversations.length + " conversation(s)");
            }
            // Define error callback.
            function queryErrorCB(error) {
                console.log("Cannot query conversations" + error.message);
            }
            var filter = tizen.createAttributeFilter({attributeName: 'from',
                                                      matchFlag: tizen.FILTER_MATCH_FLAG_CONTAINS,
                                                      matchValue: '2593'});
            messageStorage.findConversations(filter, conversationsArrayCB, queryErrorCB);

  - name: findFolders
    summary: Queries folders from MessageStorage. 
    description: |        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.read
    parameters: 
      - name: filter
        summary: Criteria used when filtering. 
        type: Tizen.AbstractFilter

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<FindFoldersResponse>
    examples:
      - example: |
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage;
            var tizen = require("tizen");
            
            function folderArrayCB(folders) {
              console.log(folders.length + " folders(s) found!");
              for (var i = 0; i < folders.length; i++) {
                console.log(i + ", folder: " + folders[i].name);
              }
            }
            var filter = tizen.createAttributeFilter({attributeName: 'serviceId',
                                                      matchFlag: tizen.FILTER_MATCH_FLAG_EXACTLY,
                                                      matchValue: service.id});
            messageStorage.findFolders(filter, folderArrayCB);

  - name: addMessagesChangeListener
    summary: Subscribes to get notification when MessageStorage changes. 
    description: |
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.read
    returns: 
      - type: Number
        summary: subscription identifier. 
    parameters: 
      - name: messagesChangeCallback
        summary: Criteria to be used when filtering. 
        type: MessagesChangeCallback

      - name: filter
        summary: Criteria to be used when filtering.
        type: Tizen.AbstractFilter
        optional: true
    examples:
      - example: |
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage;
            
            var messageChangeCallback = {
                messagesupdated: function(messages) {
                    console.log(messages.length + " message(s) updated");
                },
                messagesadded: function(messages) {
                    console.log(messages.length + " message(s) added");
                },
                messagesremoved: function(messages) {
                    console.log(messages.length + " message(s) removed");
                }
            };
            messageStorage.addMessagesChangeListener(messageChangeCallback);

  - name: addConversationsChangeListener
    summary: Subscribes to get notification when MessageConversation changes. 
    description: |
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.read
    returns: 
      - type: Number
        summary: Subscription identifier. 
    parameters: 
      - name: conversationsChangeCallback
        summary: Callback that is called when the MessageStorage is changed. 
        type: MessageConversationsChangeCallback

      - name: filter
        summary: Criteria to be used when filtering.
        type: Tizen.AbstractFilter
        optional: true

  - name: addFoldersChangeListener
    summary: Subscribes to get notification when MessageFolder changes. 
    description: |
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.read
    returns: 
      - type: Number
        summary: Subscription identifier. 
    parameters: 
      - name: foldersChangeCallback
        summary: Callback that is called when the MessageStorage is changed. 
        type: MessageFoldersChangeCallback

      - name: filter
        summary: Criteria to be used when filtering.
        type: Tizen.AbstractFilter
        optional: true
    examples:
      - example: |
            var watchId;
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage; 
            var folderChangeCB = {
                foldersupdated: function(folders) {
                    console.log(folders.length + " folders(s) updated. Cancel watching.");
                    messageStorage.removeChangeListener(watchId);
                },
                foldersadded: function(folders) {
                    console.log(folders.length + " folders(s) added. Cancel watching.");
                    messageStorage.removeChangeListener(watchId);
                },
                foldersremoved: function(folders) {
                    console.log(folders.length + " folders(s) removed. Cancel watching.");
                    messageStorage.removeChangeListener(watchId);
                }
            };
            watchId = messageStorage.addFoldersChangeListener(folderChangeCB);

  - name: removeChangeListener
    summary: This method allows a message notification subscription to be cancelled. 
    description: |
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
        If the subscriptionId argument is valid and corresponds to a subscription already in place, the subscription process MUST stop immediately and further MessagingStorage change notifications MUST NOT be invoked. If the subscriptionId argument does not correspond to a valid subscription, the method will return without any further action.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/messaging.read
    parameters: 
      - name: watchId
        summary:  Identifier of the subscription returned by addMessagesChangeListener, addConversationsChangeListener or addFoldersChangeListener methods. 
        type: Number
    examples:
      - example: |
            var watchId;
            var service; // Assume messaging service is initialized
            var messageStorage = service.messageStorage; 
            var folderChangeCB = {
                foldersupdated: function(folders) {
                    console.log(folders.length + " folders(s) updated. Cancel watching.");
                    messageStorage.removeChangeListener(watchId);
                },
                foldersadded: function(folders) {
                    console.log(folders.length + " folders(s) added. Cancel watching.");
                    messageStorage.removeChangeListener(watchId);
                },
                foldersremoved: function(folders) {
                    console.log(folders.length + " folders(s) removed. Cancel watching.");
                    messageStorage.removeChangeListener(watchId);
                }
            };
            watchId = messageStorage.addFoldersChangeListener(folderChangeCB);

# Pseudo-type    
---
name: MessagesChangeCallback
summary: watchMessagesChanges callback. 
description: This callback interface specifies a callback as a set of functions that will be invoked when messages from MessageStorage change. Each function takes a list of messages as the input argument. 
methods: 
  - name: messagesadded
    summary: Method invoked when messages are added to the MessageStorage. 
    parameters:
      - name: addedMessages 
        summary: Array of added messages.
        type: Array<Tizen.Messaging.Message>

  - name: messagesupdated 
    summary: Method invoked when messages are updated in MessageStorage. 
    parameters:
      - name: updatedMessages 
        summary: Array of updated messages. 
        type: Array<Tizen.Messaging.Message>

  - name: removedMessages
    summary: Method invoked when messages are removed from MessageStorage. 
    parameters:
      - name: removedMessages 
        summary: Array of updated messages. 
        type: Array<Tizen.Messaging.Message>

---
name: MessageConversationsChangeCallback
summary: watchConversationsChanges callback. 
description: This callback interface specifies a callback as a set of functions that will be invoked when message folders from MessageStorage change. Each function takes a list of folders as the input argument. . 
methods: 
  - name: conversationsadded
    summary: Method invoked when conversations are added to MessageStorage. 
    parameters:
      - name: addedConversations 
        summary: Array of added conversations. 
        type: Array<Tizen.Messaging.MessageConversation>

  - name: conversationsupdated 
    summary: Method invoked when conversations are updated in MessageStorage. 
    parameters:
      - name: updatedConversations 
        summary: Array of updated messages. 
        type: Array<Tizen.Messaging.MessageConversation>

  - name: conversationsremoved
    summary: Method invoked when conversations are removed from MessageStorage. 
    parameters:
      - name: removedConversations 
        summary: Array of updated messages. 
        type: Array<Tizen.Messaging.MessageConversation>

---
name: MessageFoldersChangeCallback
summary: watchFoldersChanges callback. 
description: |
    This callback interface specifies a callback as a set of functions that will be invoked when message folders from MessageStorage change. Each function takes a list of folders as the input argument. 
methods:
  - name: foldersadded
    summary: Method invoked when folders are added to MessageStorage. 
    parameters:
      - name: addedFolders 
        summary: Array of added folders. 
        type: Array<Tizen.Messaging.MessageConversation>

  - name: foldersupdated
    summary: Method invoked when folders are updated in MessageStorage. 
    parameters:
      - name: updatedFolders 
        summary: Array of updated folders. 
        type: Array<Tizen.Messaging.MessageConversation>

  - name: removedFolders
    summary: Method invoked when folders are removed from MessageStorage. 
    parameters:
      - name: removedConversations 
        summary: Array of removed folders. 
        type: Array<Tizen.Messaging.MessageConversation>

---
name: FindMessageResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [findMessages](Tizen.Messaging.MessageStorage.findMessages) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean
    
  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String
    
  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number
    since: "3.1.0"
    
  - name: messages
    summary: Array of messages that satisfy the query.
    description: Will be undefined if `success` is `false`.
    type: Array<Tizen.Messaging.Message>

---
name: FindConversationsResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [findConversations](Tizen.Messaging.MessageStorage.findConversations) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean
    
  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String
    
  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number
    since: "3.1.0"
    
  - name: conversations
    summary: Array of conversations that satisfy the query.
    description: Will be undefined if `success` is `false`.
    type: Array<Tizen.Messaging.MessageConversation>
    
---
name: FindFoldersResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [findFolders](Tizen.Messaging.MessageStorage.findFolders) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean
    
  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String
    
  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number
    since: "3.1.0"
    
  - name: folders
    summary: Array of folders that satisfy the query.
    description: Will be undefined if `success` is `false`.
    type: Array<Tizen.Messaging.MessageFolder>