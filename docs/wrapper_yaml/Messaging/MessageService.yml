---
name: Titanium.Tizen.Messaging.MessageService
summary: Message creating, sending, and fetching capabilities. 
description: |
    This interface allows a web application to manipulate and send messages.
    The interface allows you to fetch messages for all folders belonging to one account, with synchronizable flag set, using the sync() method, or for a given folder using the syncFolder() method.
    The interface allows you to fetch the message body for a given message using loadMessageBody() method.

extends: Titanium.Proxy
platforms: [tizen]
createable: false

methods:
  - name: sendMessage
    summary: Attempts to send the specified message. 
    description: |
        For messaging technologies in which the message is sent individually to every recipient, (such as SMS) individual notification MUST be supported as follows:
        For every individual recipient in the destination list, if the message cannot be sent to that recipient, the onerror method of the errorCallback argument MUST be invoked with the corresponding error type as input parameter. These error types may be passed, depending on the the error conditions:
            NetworkError: If the network connection is not accessible.
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
        The error message contains the name of the recipient who failed to receive the sent message.
        When the operation is fully completed (that is, the implementation has the result of the send operation for all recipients), the onsuccess(DOMString[] recipients) method of the successCallback will be invoked with an array of recipients who received the sent message, as input parameter.
    parameters: 
      - name: message
        summary: The message to be sent. 
        type: Titanium.Tizen.Messaging.Message

      - name: successCallback
        summary: To be invoked if the message is successfully sent
        type: Callback<Array<Strings>>
        optional: true

      - name: errorCallback
        summary: To be invoked if the sending request fails.
        type: Callback<Titanium.Tizen.WebAPIError>
        optional: true
    examples: 
      - example: |
            // Define the success callback
            function messageSent(recipients) {
                for (var i=0; i<recipients.length; i++) {
                    console.log("The SMS has been sent to " + recipients[i]);
                }
            }
            // Define the error callback.
            function messageFailed(error) {
                console.log("The SMS could not be sent " + error.message);
            }
            // Define the success callback.
            function serviceListCB(services) {
                if (services.length > 0) {
                    // SMS sending example
                    var msg = new tizen.Message(Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_SMS, {plainBody: "I will arrive in 10 minutes.", to: ["+34666666666", "+34888888888"]});
                    // Send request
                    services[0].sendMessage(msg, messageSent, messageFailed);
                }
            }
            Titanium.Tizen.Messaging.getMessageServices(Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_SMS, serviceListCB);

  - name: loadMessageBody
    summary: Attempts to load the body for the specified message. 
    description: |
        It is the back end's responsibility to detect which mime parts of the message are related to the message body and should be loaded. If the message body is already loaded, the onsuccess method of the successCallback will be invoked immediately.
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
    parameters: 
      - name: message
        summary: Message with the body to be loaded. 
        type: Titanium.Tizen.Messaging.Message

      - name: successCallback
        summary: Function to be invoked if the message body is successfully loaded. 
        type: Callback<Titanium.Tizen.Messaging.Message> 

      - name: errorCallback
        summary:  Function to be invoked if the loading request fails
        type: Callback<Titanium.Tizen.WebAPIError>
        optional: true
    examples: 
      - example: |
            var service; // Assume messaging service is initialized
            // Define the success body loaded callback.
            function successCallback(message) {
                console.log ("body for message: " + message.subject + "from: " + message.from + "loaded.");
            }
            // Define error callback.
            function errorCallback(error) {
                console.log("Cannot load message body" + error.message);
            }
            function messageQueryCallback(messages) {
                for (var i = 0; i < messages.length; i++) {
                    var message = messages[i];
                    if (!message.body.loaded) {
                        service.loadMessageBody(message, successCallback, errorCallback);
                    }
                }
            }
            service.messageStorage.findMessages(Titanium.Tizen.createAttributeFilter("type", "EXACTLY", Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_EMAIL), messageQueryCallback);

  - name: loadMessageAttachment
    summary: Attempts to load the specified message attachment. 
    description: |
        This method is used only for EMAIL services. If the message attachment is already loaded, the onsuccess method of the successCallback will be invoked immediately.
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            UnknownError: In any other error case.
    parameters: 
      - name: attachment
        summary: Message attachment to be loaded. 
        type: Titanium.Tizen.Messaging.MessageAttachment

      - name: successCallback
        summary: Function to be invoked if the message attachment is successfully loaded. 
        type: Callback<Titanium.Tizen.Messaging.MessageAttachment> 

      - name: errorCallback
        summary: Function to be invoked if the loading request fails. 
        type: Callback<Titanium.Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var service; // Assume messaging service is initialized
            // Define success body loaded callback
            function successCallback(attachment) {
                console.log("attachment" + attachment.id + "is loaded to:" + attachment.filePath);
            }
            // Define error callback
            function errorCallback(error) {
                console.log("Cannot load message attachment" + error.message);
            }
            function messagesFoundCB(messages) {
                for (var i = 0; i < messages.length; i++) {
                    var message = messages[i];
                    if (!message.attachments[0].loaded) {
                        service.loadMessageAttachment(message.attachments[0], successCallback, errorCallback);
                    }
                }
            }
            service.messageStorage.findMessages(Titanium.Tizen.createAttributeFilter("hasAttachment", "EXACTLY", true), messagesFoundCB);

  - name: sync
    summary: Synchronizes the service content with an external mail server. 
    description: |
        This method is used only for EMAIL services. This method performs the same actions as syncFolder for every folder with Synchronizable flag set within the current Messaging service.
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            AbortError: If the operation is stopped.
            UnknownError: In any other error case.
    returns: 
      - type: Number
        summary: Identifier which can be used to stop this service operation. 
    parameters: 
      - name: successCallback
        summary:  To be invoked if all the actions are completed successfully
        type: Callback<Object>
        optional: true

      - name: errorCallback
        summary: To be invoked if the request fails. 
        type: Callback<Titanium.Tizen.WebAPIError>
        optional: true

      - name: limit
        summary: The maximum amount of messages retrieved within each folder. 
        type: Number
        optional: true
    examples:
      - example: |
            // Define the success callback.
            function serviceSynced() {
                console.log("New messages are fetched!");
            }
            // Define the success callback.
            function servicesListSuccessCB(services) {
                services[0].sync(serviceSynced, null, 30);
                // Subscribe to MessageStorage notification
            }
            Titanium.Tizen.Messaging.getMessageServices(Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_EMAIL, servicesListSuccessCB);

  - name: syncFolder
    summary: Synchronizes the folder content with an external mail server. 
    description: |
        This method is used only for EMAIL services. This method is performed the following actions:
            export local changes within a given folder from device to server (If exportUpdates flag set).
            retrieve the list of available messages from within the given folder.
        Messages are retrieved from a given folder, even if synchronizable flag for this folder is not set. The backend is to decide which data is retrieved for every message. It can be:
            message header details
            whole message body
        The limit of latest messages for the given folder MUST be retrieved and put into MessageStorage. If the limit is not set, the entire folder MUST be retrieved.
        The errorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contains an invalid value.
            AbortError: If the operation is stopped.
            UnknownError: In any other error case.
    returns: 
      - type: Number
        summary: Identifier which can be used to stop this service operation. 
    parameters: 
      - name: folder
        summary: Folder to be synchronized. 
        type: Titanium.Tizen.Messaging.MessageFolder

      - name: successCallback
        summary: Function to be invoked if all actions are completed successfully. 
        type: Callback<Object>
        optional: true

      - name: errorCallback
        summary: Function to be invoked if the request fails.
        type: Callback<Titanium.Tizen.WebAPIError>
        optional: true

      - name: limit
        summary: The maximum amount of messages retrieved within a given folder. 
        type: Number
        optional: true
    examples:
      - example: |
            var emailService; // Assume email service is initialized
            // Define the error callback.
            function errorCallback(err) {
                console.log(err.name + " error: " + err.message);
            }
            function serviceCallback(services) {
                 emailService = services[0];
            } 
            // Define the success callback.
            function folderSynced() {
                console.log("New messages are fetched!");
            }
            function folderQueryCallback(folders) {
                console.log(folders.length + " folders(s) found!");
                for (var i = 0; i < folders.length; i++) {
                    emailService.syncFolder(folders[i], folderSynced, null, 30);
                }
            }
            tizen.messaging.getMessageServices(Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_EMAIL, serviceCallback, errorCallback);
            var filter = Titanium.Tizen.createAttributeFilter("serviceId", "EXACTLY", emailService.id);
            emailService.messageStorage.findFolders(filter, folderQueryCallback);

  - name: stopSync
    summary: Stops sync() and syncFoler() operation. 
    description: |
        If the operationId argument is valid and corresponds to a service operation already in place, the operation MUST be stopped and its error callback MUST be invoked with error type AbortError.
        If the operationId argument is not valid or does not correspond to a valid service operation, the method will return without any further action.
    parameters: 
      - name: opId
        summary: Service operation identifier. 
        type: Number

properties:
  - name: type
    summary: | 
        The tag supported by this messaging service. Can be one of this constants: <Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_SMS>, 
        <Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_MMS>, <Titanium.Tizen.Messaging.MESSAGE_SERVICE_TAG_MESSAGING_EMAIL>.
    type: String
    permission: read-only

  - name: messageStorage
    summary: | 
        The interface for accessing MessageStorage for this Messaging service.
        If the backend does not support MessageStorage for this Messaging service, a WebAPIException is raised with error type NotSupportedError.
    type: Titanium.Tizen.Messaging.MessageStorage
    permission: read-only
