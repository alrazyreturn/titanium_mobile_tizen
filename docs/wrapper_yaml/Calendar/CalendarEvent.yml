---
name: Modules.Tizen.Calendar.CalendarEvent
summary:  An interface that implements the calendarEvent object.
extends: Modules.Tizen.Calendar.CalendarItem

examples:
      - example: |
            Example 1:
            
                // Gets the default calendar
                var tizen = require("tizen");
                var calendar = tizen.Calendar.getDefaultCalendar(tizen.Calendar.CALENDAR_TYPE_EVENT);
                
                try {
                
                    var ev = tizen.Calendar.createCalendarEvent({stringRepresentation: "BEGIN:VCALENDAR\r\n" +
                                                                                                "BEGIN:VEVENT\r\n" +
                                                                                                "DTSTAMP:19970901T1300Z\r\n" +
                                                                                                "DTSTART:19970903T163000Z\r\n" +
                                                                                                "DTEND:19970903T190000Z\r\n" +
                                                                                                "SUMMARY:Annual Employee Review\r\n" +
                                                                                                "CATEGORIES:BUSINESS,HUMAN RESOURCES\r\n" +
                                                                                                "END:VEVENT\r\n" +
                                                                                                "END:VCALENDAR",
                                                                          format: "ICALENDAR_20"});
                               
                    calendar.add(ev);
                    Titanium.API.info('Event added with UID ' + ev.id.uid);
                } catch (err) {
                    
                    Titanium.API.info("Failed to add VEVENT to the calendar, error: " + err.name);
                }
methods:
  - name: expandRecurrence
    summary: |
        This method takes into consideration all the parameters of the event recurrence rule to generate the instances occurring in a given time interval.
        The call involves retrieving from the database detached instances of an event to replace their corresponding virtual instances in the returned list. 
        The client can then use CalendarEvent.isDetached attribute to identify detached instances.
        If the event is not saved to a calendar yet, only virtual instances will be returned.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/calendar.read
    parameters:
      - name: startDate
        summary:  The start date/ time of an event(inclusive).
        type: Date

      - name: endDate 
        summary:   The end date/ time of an event (inclusive).
        type: Date
        
      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ExpandRecurrenceResponse>
    examples:
      - example: |    
            // Defines the error callback.
            function errorCallback(response) {
                Titanium.API.info( 'The following error occurred: ' +  response);
            }
            
            // Defines the event expanding success callback.
            function eventExpandingSuccessCallback(events) {
                Titanium.API.info(events.length + ' event instances were returned.');
            }
            var tizen = require("tizen");
            var calendar = tizen.Calendar.getDefaultCalendar();
            var event = calendar.get(evId);
            
            if (event.recurrenceRule != null) {
                // This is a recurring event. Expand all the instances during August 2011.
                event.expandRecurrence(new Date(2011, 7, 1),
                                    new Date(2011, 7, 31),
                                    function(response){
                                        if(response.success) {
                                            eventExpandingSuccessCallback(response.events);
                                        } else {
                                            errorCallback(response.error);
                                        }
                                    });
            }
  
properties:
  - name: isDetached 
    type: Boolean
    summary: An attribute that behaves like a flag to indicates if an instance of a recurring event is detached and if it has been modified and saved to the calendar.
    permission: read-only
    
  - name: endDate 
    type: Date
    summary: |
        An attribute to store the end date/time of an event.(see RFC 5545 - Section 3.8.2.2).
        This endDate must be in the same time zone as the startDate. 
        Note that duration and endDate are mutually exclusive, only one of them can be non-null.
        
        This attribute is precise to the second. Milliseconds are ignored.
        
        The default value for this attribute is null.
    examples:
      - example: |    
            // 2010-04-30 09:00
            event.endDate = new Date(2010, 3, 30, 9, 0);    
        
  - name: availability
    type: String
    summary: |
        An attribute to indicate the availability of a person for an event. (See RFC 5545 - Section 3.2.9).
        The value is one of the constants defined for this parameter : EVENT_AVAILABILITY_BUSY = 'BUSY' or EVENT_AVAILABILITY_FREE = 'FREE'
        
        The default value is EVENT_AVAILABILITY_BUSY.
        
  - name: recurrenceRule 
    type: Date
    summary: |
        An attribute to denote the recurrence rule for the event.
        
        The generated instances of a recurring event will have the same recurrence rule as their parent.
        This is useful when editing a particular event instance and choosing to update all instances from it.
        
        The detached instances (specific instances that have been modified as saved to the calendar) of a recurring event will not have any recurrence rule. 
        No recurrence rule can be set on detached instances either. If one tries to set a recurrence rule on a detached event, 
        a NotSupportedError should be thrown. Detached instances can be distinguished by checking their isDetached attribute. (See RFC 5545, Section 3.3.10.)
    examples:
      - example: |    
            // Repeats daily for 7 days
            var tizen = require("tizen");
            var rule = tizen.Calendar.createCalendarRecurrenceRule({frequency: tizen.Calendar.RECURRENCE_RULE_FREQUENCY_DAILY,
                                                                    ruleInitDict: {occurrenceCount: 7}});
            event.recurrenceRule = rule;

---
name: ExpandRecurrenceResponse
summary: |
    Simple object returned in the callback from
    [expandRecurrence](Modules.Tizen.Calendar.CalendarEvent.expandRecurrence) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String

  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number

  - name: events
    summary:  The array of CalendarEvent objects.
    description: Will be undefined if `success` is `false`.
    type: Array<Modules.Tizen.Calendar.CalendarEvent>
