---
name: Tizen.CompositeFilter
summary: CompositeFilter represents a set of filters. 
description: |
    The composite filters can be one of the 2 types:
    The union - used to filter objects that match any of the filters it includes.
    The intersection - used to filter objects that match all filters it includes.

platforms: [tizen]
extends: Tizen.AbstractFilter

properties:
  - name: type
    summary: The name of the object attribute used for filtering.
    description: Use Tizen.COMPOSITE_FILTER_TYPE_UNION or Tizen.COMPOSITE_FILTER_TYPE_INTERSECTION 
    type: String

  - name:  filters
    summary: The list of filters in the composite filter. 
    type: "Tizen.AbstractFilter[]"
    default: FILTER_MUCH_FLAG_EXACTLY

examples:
  - title: This example demonstrate using Composite Filter
    example: |
        // Define success callback
        function successCallback(contacts) {
            console.log(contacts.length + " contacts found.");
        }

        // Define error callback
        function errorCallback(error) {
            console.log("An error occurred: " + error.message);
        }
    
        var tizenObj = require('Ti/Tizen');
        
        // Create an attribute filter based on first name: "First name should contain 'Chris' (case insensitive)
        var firstNameFilter = tizenObj.createAttributeFilter({attributeName: "name.firstName",
                                                     matchFlag: tizenObj.FILTER_MATCH_FLAG_CONTAINS,
                                                     matchValue: "Chris"});
    
        // Create an attribute filter based on last name: "Last name should be exactly 'Smith' (case insensitive)
        var lastNameFilter = tizenObj.createAttributeFilter({attributeName: "name.lastName",
                                                             matchFlag: tizenObj.FILTER_MATCH_FLAG_EXACTLY,
                                                             matchValue: "Smith"});
    
        // Create a filter based on the intersection of these two filter:
        // "First name should contain 'Chris' AND last name should be 'Smith'".
        var filter = tizenObj.createCompositeFilter({type: tizenObj.COMPOSITE_FILTER_TYPE_INTERSECTION,
                                                     filters: [firstNameFilter, lastNameFilter]});
    
        // Send request on contact address book.
        tizen.contact.getDefaultAddressBook().find(successCallback, errorCallback, filter);