---
name: Titanium.Tizen.Bluetooth.BluetoothDevice
summary: The interface which represents a remote Bluetooth device.   
description: |
    This interface holds information about a remote device available on a local Bluetooth device, such as device name, address, bonding status, etc.
    A BluetoothDevice object can be retrieved using one of the following APIs:
        BluetoothAdapter.getDevice()
        BluetoothAdapter.getKnownDevices()
        BluetoothAdapter.discoverDevices()
        BluetoothAdapter.createBonding()

extends: Titanium.Module
platforms: [tizen]
methods:

  - name: connectToServiceByUUID
    summary: Creates a socket connection to the specified service UUID.
    description: |
        This method attempts to open a connection to the service identified by uuid on this remote device. This performs an SDP(Service Discovery Protocol) lookup on the local device for the given uuid and determines which channel to use.
        If opening a connection is successful, then a BluetoothSocket object with open state is sent using successCallback, through which data can be exchanged by both devices.
        The ErrorCallback is launched with these error types:
            NotFoundError: If there is no service with the given uuid
            InvalidValuesError: If any of the input parameters contain an invalid value.
            UnknownError: In any other error case

    parameters: 
      - name: uuid
        summary: 128 bit unique identifier, which represents the service record on the device.
        type: String

      - name: successCallback
        summary: Method to be invoked when the asynchronous call completes successfully. 
        type: Callback<Titanium.Tizen.Bluetooth.BluetoothSocket> 

      - name: errorCallback
        summary: Method to be invoked in case of failure to open a socket.
        type: Callback<Titanium.Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var adapter = Titanium.Tizen.Bluetooth.getDefaultAdapter();
            
            var clientSocket = null;

            // Method to be called when user wants to send a message to a remote device
            
            function sendMessage(msg) {
            
                // Validate socket state, if everything is ok.
                if (clientSocket != null && clientSocket.state == "OPEN") {
                    //Send
                    clientSocket.writeData(msg);
                }
            }

            // Method to be invoked when a socket is open
            
            function onSocketConnected(socket) {
            
                clientSocket = socket;
                console.log("Opening a socket successfully!!!");
                
                socket.onmessage = function () {
                    var data = socket.readData();
                    var recvmsg = "";
                    for (var i=0; i< data.length; i++)
                    {
                        recvmsg += String.fromCharCode(data[i]);
                    }
                    console.log("server msg >> " + recvmsg);
                };

                socket.onerror = function (e) {
                    console.log("Socket Error: " + e.message);
                };

                socket.onclose = function() {
                    console.log("socket disconnected.");
                };
            }

            function onDeviceReady(device) {
            
                // validate service uuid
                if (device.uuids.indexOf("5BCE9431-6C75-32AB-AFE0-2EC108A30860") != -1) {
                
                    // open socket
                    device.connectToServiceByUUID("5BCE9431-6C75-32AB-AFE0-2EC108A30860", onSocketConnected, function(e) {
                        console.log ("Error connecting to service. Reason: " + e.message);
                    });
                }
                else {
                    console.log ("Char service is not supported by this device");
                }
            }

            function onSetPowered() {
                
                // get the BluetoothDevice object
                adapter.getDevice("35:F4:59:D1:7A:03", onDeviceReady, function(e) { console.log("Error: " + e.message()); });
                
            }

            adapter.setPowered(true, onSetPowered, function(e) {console.log ("Could not turn on Bluetooth adapter. reason: " + e.message); });
 
properties:
  - name: name
    summary: The readable name of the device.
    type: String
    permission: read-only

  - name: address
    summary: The hardware address of the device. 
    type: String
    permission: read-only

  - name: deviceClass
    summary: The device class, which represents the type of the device and the services it provides.  
    type: Titanium.Tizen.Bluetooth.BluetoothClass
    permission: read-only

  - name: isBonded
    summary: The bond state of the device with the local device.  
    type: Boolean
    permission: read-only

  - name: isTrusted
    summary: The value is necessary to check if the local Bluetooth adapter recognizes the Bluetooth device as a trusted device. 
    type: Boolean
    permission: read-only

  - name: isConnected
    summary: The connection state of the Bluetooth device with the local Bluetooth adapter.     
    type: Boolean
    permission: read-only

  - name:  uuids
    summary: The list of 128 bit service UUIDs available on this device. 
    type: Array<String>
    permission: read-only

