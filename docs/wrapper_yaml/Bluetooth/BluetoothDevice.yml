---
name: Tizen.Bluetooth.BluetoothDevice
summary: The interface which represents a remote Bluetooth device.   
description: |
    This interface holds information about a remote device available on a local Bluetooth device, such as device name, address, bonding status, etc.
    A BluetoothDevice object can be retrieved using one of the following APIs:
        BluetoothAdapter.getDevice()
        BluetoothAdapter.getKnownDevices()
        BluetoothAdapter.createBonding()

extends: Titanium.Proxy
platforms: [tizen]
methods:

  - name: connectToServiceByUUID
    summary: Creates a socket connection to the specified service UUID.
    description: |
        This method attempts to open a connection to the service identified by uuid on this remote device. This performs an SDP(Service Discovery Protocol) lookup on the local device for the given uuid and determines which channel to use.
        If opening a connection is successful, then a BluetoothSocket object with open state is sent using callback, through which data can be exchanged by both devices.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.spp

    parameters: 
      - name: uuid
        summary: 128 bit unique identifier, which represents the service record on the device.
        type: String

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ConnectToServiceByUUIDResponse>
    examples:
      - example: |
            Example 1:
            
                var tizen = require("tizen");
                var adapter = tizen.Bluetooth.getDefaultAdapter();
                var clientSocket = null;
                
                // Method to be called when user wants to send a message to a remote device
                
                function sendMessage(msg) {
                        
                    // Validate socket state, if everything is ok.
                    if (clientSocket != null && clientSocket.state == tizen.Bluetooth.BLUETOOTH_SOCKET_STATE_OPEN) {
                        //Send
                        clientSocket.writeData(msg);
                    }
                }
                        
                // Method to be invoked when a socket is open
                
                function onSocketConnected(socket) {
                
                    clientSocket = socket;
                    console.log("Opening a socket successfully!!!");
                    
                    socket.addEventListener('socketmessagereceived', function() {
                        var data = socket.readData();
                        var recvmsg = "";
                        for (var i=0; i< data.length; i++)
                        {
                            recvmsg += String.fromCharCode(data[i]);
                        }
                        console.log("server msg >> " + recvmsg);
                    };
                    
                    socket.addEventListener('socketerror', function(e) {
                        console.log("Socket Error: " + e.message);
                    };
                    
                    socket.addEventListener('socketclosed', function() {
                        console.log("socket disconnected.");
                    };
                }
                
                function onDeviceReady(device) {
                    
                    // validate service uuid
                    if (device.uuids.indexOf("5BCE9431-6C75-32AB-AFE0-2EC108A30860") != -1) {
                        
                        // open socket
                        device.connectToServiceByUUID("5BCE9431-6C75-32AB-AFE0-2EC108A30860",
                            function(response){
                                if(response.success) {
                                    onSocketConnected(response.socket);
                                } else {
                                    console.log("Error connecting to service. Reason: " + response.error);
                                }
                            }
                        );
                    }
                    else {
                        console.log ("Char service is not supported by this device");
                    }
                }
                
                function onSetPowered() {
                    
                    // get the BluetoothDevice object
                    adapter.getDevice("35:F4:59:D1:7A:03",
                        function(response){
                            if(response.success) {
                                onDeviceReady(response.device);
                            } else {
                                console.log("Error: " + response.error);
                            }
                        }
                    );
                
                }
                
                adapter.setPowered(true,
                    function(response){
                        if(response.success) {
                            onSetPowered();
                        } else {
                            console.log ("Could not turn on Bluetooth adapter. reason: " + response.error);
                        }
                    });

properties:
  - name: name
    summary: The readable name of the device.
    type: String
    permission: read-only

  - name: address
    summary: The hardware address of the device. 
    type: String
    permission: read-only

  - name: deviceClass
    summary: The device class, which represents the type of the device and the services it provides.  
    type: Tizen.Bluetooth.BluetoothClass
    permission: read-only

  - name: isBonded
    summary: The bond state of the device with the local device.  
    type: Boolean
    permission: read-only

  - name: isTrusted
    summary: The value is necessary to check if the local Bluetooth adapter recognizes the Bluetooth device as a trusted device. 
    type: Boolean
    permission: read-only

  - name: isConnected
    summary: The connection state of the Bluetooth device with the local Bluetooth adapter.     
    type: Boolean
    permission: read-only

  - name:  uuids
    summary: The list of 128 bit service UUIDs available on this device. 
    type: Array<String>
    permission: read-only

---
name: ConnectToServiceByUUIDResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [connectToServiceByUUID](Tizen.Bluetooth.BluetoothDevice.connectToServiceByUUID) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String

  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number

  - name: socket
    summary: Socket connected to the specified service on the remote device.
    description: Will be undefined if `success` is `false`.
    type: Tizen.Bluetooth.BluetoothSocket



