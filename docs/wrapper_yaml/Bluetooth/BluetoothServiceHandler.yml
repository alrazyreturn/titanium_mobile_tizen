---
name: Tizen.Bluetooth.BluetoothServiceHandler
summary: The Bluetooth service interface. 
extends: Titanium.Module
platforms: [tizen]
methods:

  - name: unregister
    summary: Unregisters a service record from service database. 
    description: |
        This method unregisters a service record from the Bluetooth services record database and stops listening for new connections to this service.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.spp

    parameters: 
      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse>
        optional: true
    examples:
      - example: |
            Example 1: 
            
                var tizen = require("tizen");
                var adapter = tizen.Bluetooth.getDefaultAdapter();
                
                var chatServiceHandler = null;
                
                function chatServiceSuccessCb(handler) {
                
                    Ti.API.info("Chat service registration was successful!");
                    
                    chatServiceHandler = handler;
                    
                    handler.addEventListener('remotedeviceconnected', function(e) {
                        var socket = e.socket;
                        
                        Ti.API.info("Client connected: " + socket.peer.name + "," + socket.peer.address);
                        serviceSocket = socket;
                        
                        // Message received from remote device
                        socket.addEventListener('socketmessagereceived', function() {
                            var data = socket.readData();
                            
                            // handle message code goes here
                            //....
                        };
                        
                        socket.addEventListener('socketerror', function(e) {
                            Ti.API.info('Error: ' + e.message);
                        };
                        
                        socket.addEventListener('socketclosed', function() {
                            Ti.API.info('The socket is closed.');
                            serviceSocket = null;
                        };
                    }
                }
                
                function publishChatService() {
                    var CHAT_SERVICE_UUID = "5BCE9431-6C75-32AB-AFE0-2EC108A30860";
                    
                    adapter.registerRFCOMMServiceByUUID(CHAT_SERVICE_UUID, "Chat service",
                        function(response){
                            if(response.success) {
                                chatServiceSuccessCb(response.hendler);
                            } else {
                                Ti.API.info( "Could not register service record, Error: " + response.error);
                            }
                        }
                    );
                }
                
                function unRegisterChatService() {
                    if (chatServiceHandler != null) {
                    
                        chatServiceHandler.unregister(function(response) {
                            if(response.success) {
                                chatServiceHandler = null;
                                Ti.API.info("Chat service is unregistered.");
                            } else {
                                Ti.API.info("Error: " + response.error);
                            }
                        });
                    }
                }

events:
  - name: remotedeviceconnected
    summary: The callback to be invoked when a remote device connected to this service.
    properties:
      - name: socket
        type: Tizen.Bluetooth.BluetoothSocket
            
properties:
  - name: uuid
    summary: UUID of the service. 
    type: String
    permission: read-only

  - name: name
    summary: The name of the service. 
    type: String
    permission: read-only

  - name: isConnected
    summary: The value is necessary to check if any other Bluetooth devices use this service. 
    type: Boolean
    permission: read-only