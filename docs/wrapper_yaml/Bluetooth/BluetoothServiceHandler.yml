---
name: Titanium.Tizen.Bluetooth.BluetoothServiceHandler
summary: The Bluetooth service interface. 
extends: Titanium.Module
platforms: [tizen]
methods:

  - name: unregister
    summary: Unregisters a service record from service database. 
    description: |
        This method unregisters a service record from the Bluetooth services record database and stops listening for new connections to this service.
        The ErrorCallback is launched with these error types:
            UnknownError: In any error case

    parameters: 
      - name: successCallback
        summary:  Method to be invoked when the record is removed successfully from the service records database.
        type: Callback<Object>
        optional: true

      - name: errorCallback
        summary:   Method to be invoked in case of failure (to unregister).
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var adapter = Tizen.Bluetooth.getDefaultAdapter();
            
            var chatServiceHandler = null;

            function chatServiceSuccessCb(handler) {
            
                console.log("Chat service registration was successful!");

                chatServiceHandler = handler;
                
                handler.onconnect = function(socket) {
                    console.log("Client is connected: " + socket.peer.name + "," + socket.peer.address);
                    socket.onmessage = function() {
                       var data = socket.readData();
                       // handle message code goes here
                       //....
                    };

                    // Something went wrong
                    socket.onerror = function(e) {
                       console.log('Error: ' + e.message);
                    };

                    // Expected close
                    socket.onclose = function() {
                       console.log('The socket is closed.');
                    };
                };
            }

            function publishChatService()
            {

                var CHAT_SERVICE_UUID = "5BCE9431-6C75-32AB-AFE0-2EC108A30860";
                
                adapter.registerRFCOMMServiceByUUID(CHAT_SERVICE_UUID, "Chat service", chatServiceSuccessCb,
                
                    // Error handler
                    function(e) {
                        console.log( "Could not register service record, Error: " + e.message);
                    });
            }

            function unRegisterChatService()
            {
            
                if (chatServiceHandler != null) {
                
                    chatServiceHandler.unregister(function() {
                        chatServiceHandler = null;
                        console.log("Chat service is unregistered.");
                    },
                    
                    function(e) {
                        console.log ("Error: " + e.message);
                    });
                }
            }
properties:
  - name: uuid
    summary: UUID of the service. 
    type: String
    permission: read-only

  - name: name
    summary: The name of the service. 
    type: String
    permission: read-only

  - name: isConnected
    summary: The value is necessary to check if any other Bluetooth devices use this service. 
    type: Boolean
    permission: read-only

  - name: onconnect
    summary: The success callback to be invoked when a remote device connected to this service.   
    type: Callback<Titanium.Tizen.Bluetooth.BluetoothSocket>
