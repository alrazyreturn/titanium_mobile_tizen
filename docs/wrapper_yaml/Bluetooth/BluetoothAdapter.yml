---
name: Tizen.Bluetooth.BluetoothAdapter
summary: The Bluetooth adapter interface that provides access to control the device's Bluetooth adapter.  
description: |
    This interface offers methods to control local Bluetooth behavior, such as:

    Turn on/off Bluetooth radio
    Scan for remote devices
    Access known devices
    Register a service in the device service database
extends: Titanium.Module
platforms: [tizen]
methods:

  - name: setName
    summary: Sets the local Bluetooth adapter name.
    description: |
        Sends a request to Bluetooth hardware to change the name of the local Bluetooth adapter to name.
        The ErrorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contain an invalid value.
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.admin
    parameters: 
      - name: name
        summary: Name to set.
        type: String

      - name: successCallback
        summary: Method invoked when the asynchronous call completes successfully
        type: Callback<Object> 
        optional: true

      - name: errorCallback
        summary: Method invoked when an error occurs.
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            
            function changeName(newName) {
            
                if(adapter.name != newName) {
                
                    // initiate change name
                    adapter.setName(newName, function() {
                        Ti.API.info("Adapter name changed to " + adapter.name);
                    },
                    
                    function(e) {
                        Ti.API.info("Failed to change name: " + e.message);
                    });
                }
            }
            
            changeName("myDevice");
 
  - name: setPowered
    summary: Turns Bluetooth adapter on or off. 
    description: |
        Sends a request to Bluetooth hardware to change the state to a given state. For most Bluetooth actions, the Bluetooth adapter must be powered on.
        The ErrorCallback is launched with these error names:
            ServiceNotAvailableError: If a Bluetooth device is busy.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.admin

    parameters: 
      - name: state
        summary: "State to set: true to power on Bluetooth, false to power it off." 
        type: Boolean

      - name: successCallback
        summary: Method to be invoked on successful Bluetooth activation/deactivation.
        type: Callback<Object> 
        optional: true

      - name: errorCallback
        summary: Method to be called in case Bluetooth activation/deactivation failed.
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            
            function powerOn() {
                // if not powered on
                if(!adapter.powered) {
                
                    // initiate power on
                    adapter.setPowered(true, function() {
                        Ti.API.info("Bluetooth powered on success.");
                    },
                    
                    function(e) {
                        Ti.API.info("Failed to power on Bluetooth: " + e.message);
                    });
                }
            }
            
            function powerOff() {
            
                // if powered on
                if(adapter.powered) {
                
                    // initiate power off
                    adapter.setPowered(false, function() {
                        Ti.API.info("Bluetooth powered off successfully.");
                    },
                    
                    function(e) {
                        Ti.API.info("Failed to power off Bluetooth: " + e.message);
                    });
                }
            }

  - name: discoverDevices
    summary: Searches for nearby Bluetooth devices.  
    description: |
        That is, devices within proximity to the local device. This method initiates the device discovery process. 
        When the discovery process has started successfully, event 'discoverystarted' is invoked. 
        If any device is found in the process, then the device information is sent with 'devicefound'. 
        At the end of the discovery process, event 'discoveryfinished' is invoked. 
        If a device goes out of proximity then event 'devicedisappeared' is invoked with the address of the device. 
        Note that if no device is found, event 'devicefound' will never be called.
        The discovery process can be cancelled anytime, by calling stopDiscovery() on the BluetoothAdapter.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            
            function startDiscovery() {
                // starts searching for nearby devices
                adapter.discoverDevices();
            }
            
            adapter.addEventListener('discoverystarted', function() {
                Ti.API.info ("Device discovery started...") ;
            }
            
            adapter.addEventListener('devicefound', function(device) {
                Ti.API.info("Found device - name: " + device.name + ", Address: "+ device.address);
            }
            
            adapter.addEventListener('devicedisappeared', function(address) {
                Ti.API.info("Device disappeared: " + address);
                // Remove from list, as it is no longer valid.
            }
            
            adapter.addEventListener('discoveryfinished', function(devices) {
                Ti.API.info("Found Devices");
                for (var i=0; i<devices.length; i++) {
                    Ti.API.info("Name: " + devices[i].name + ", Address: " + devices[i].address);
                }
                Ti.API.info("Total: " + devices.length);
            }
            
            adapter.addEventListener('discoveryerror', function(e) {
                Ti.API.error("Failed to search devices: " + e.message + "(" + e.name + ")");
            }
            
            function onSetPoweredError(e) {
                Ti.API.info("Could not turn on device, reason: " + e.message + "(" + e.name + ")");
            }
            
            adapter.setPowered(true, startDiscovery, onSetPoweredError);

  - name: stopDiscovery
    summary: Stops the device discovery process session, if active.   
    description: |
        Device discovery is a heavyweight procedure, hence we recommend stopping discovery as soon as required device is found. This method cancels an active discovery session.
        The ErrorCallback is launched with these error types:
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: successCallback
        summary: Method to be invoked when the asynchronous call completes successfully. 
        type: Callback<Object>
        optional: true

      - name: errorCallback
        summary: Method to be invoked when an error occurs. 
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var tizen = require("tizen"),
                adapter = tizen.Bluetooth.getDefaultAdapter();
            
            // Call this whenever use selects one of the device
            function cancelDiscovery() {
            
                adapter.stopDiscovery(function() {
                    Ti.API.info("Stop discovery success.");
                },
                function (e) {
                    Ti.API.info("Error while stopDiscovery:" + e.message);
                });
                
            }
            
            function startDiscovery() {
                // starts searching for nearby devices
                adapter.discoverDevices();
            }
            
            adapter.addEventListener('discoverystarted', function() {
                Ti.API.info ("Device discovery started...") ;
            }
            
            adapter.addEventListener('devicefound', function(device) {
                Ti.API.info("Found device - name: " + device.name + ", Address: "+ device.address);
                
                // Show device to user, if this is the one he is looking for
                // for example, add this to list view.
                cancelDiscovery();
            }
            
            adapter.addEventListener('devicedisappeared', function(address) {
                Ti.API.info("Device disappeared: " + address);
                // Remove from list, as it is no longer valid.
            }
            
            adapter.addEventListener('discoveryfinished', function(devices) {
                Ti.API.info("Found Devices");
                for (var i=0; i<devices.length; i++) {
                    Ti.API.info("Name: " + devices[i].name + ", Address: " + devices[i].address);
                }
                Ti.API.info("Total: " + devices.length);
            }
            
            adapter.addEventListener('discoveryerror', function(e) {
                Ti.API.error("Failed to search devices: " + e.message + "(" + e.name + ")");
            }
            
            function onSetPoweredError(e) {
                Ti.API.info("Could not turn on device, reason: " + e.message + "(" + e.name + ")");
            }
            
            adapter.setPowered(true, startDiscovery, onSetPoweredError);

  - name: getKnownDevices
    summary: Gets all the devices that have information stored in the local Bluetooth adapter.    
    description: |
        A known device is one of the following:
            a bonded device
            a device found in last inquiry process
        On success, it returns the list of currently known devices through BluetoothDeviceArraySuccessCallback.
        The ErrorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contain an invalid value.
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: successCallback
        summary: Method invoked at retrieval of a list of Bluetooth devices that were bonded to the local Bluetooth adapter.  
        type: Callback<Object>

      - name: errorCallback
        summary: Method invoked in case of failure to get bonded devices. 
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            function onGotDevices(devices) {
                Ti.API.info("Devices");
                for (var i=0; i < devices.length; i++) {
                    Ti.API.info(" Name: " + devices[i].name + ", Address: " + devices[i].address);
                }
                Ti.API.info("Total: " + devices.length);
            }
            function onError(e) {
                Ti.API.info ("Error: " + e.message);
            }
            function onBluetoothsetPowered() {
                adapter.getKnownDevices(onGotDevices, onError);
            }
            // turn on Bluetooth
            adapter.setPowered(true, onBluetoothsetPowered);

  - name: getDevice
    summary: Gets the BluetoothDevice object for a given device hardware address. 
    description: |
        This method returns device information stored in the local Bluetooth adapter for the specified device address through BluetoothDeviceSuccessCallback.onsuccess(). A valid hardware address must be passed, such as "35:F4:59:D1:7A:03".
        The ErrorCallback is launched with these error types:
            NotFoundError: If there is no device with the given address.
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: address
        summary: Address of a remote Bluetooth device to get.  
        type: String

      - name: successCallback
        summary: Method to be invoked when the asynchronous call completes successfully. 
        type: Callback<Tizen.Bluetooth.BluetoothDevice> 
        optional: true

      - name: errorCallback
        summary:  Method to be invoked when an error occurs.
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            function gotDeviceInfo(device) {
                Ti.API.info("Device Name: " + device.name);
                Ti.API.info("Device Address: " + device.address);
                Ti.API.info("Device Class: " + device.deviceClass.major);
                Ti.API.info("Is Bonded: " + device.isBonded ? "Yes" : "No");
            }
            function onError(e) {
                Ti.API.info ("Could not get device info:" + e.message);
            }
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            adapter.getDevice("35:F4:59:D1:7A:03", gotDeviceInfo, onError);

  - name: createBonding
    summary: Initiates the bonding process with a remote device.  
    description: |
        To communicate with any remote Bluetooth device, it must be bonded (that is, the device should be authenticated). Only bonded devices can connect to services and exchange data with each other. This method initiates the bonding process with peer device, using the given MAC address.
        If the bonding process is successful, the device information is sent through successCallback.
        The ErrorCallback is launched with these error types:
            NotFoundError: If there is no device with the given address.
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: address
        summary: The MAC address of remote Bluetooth address to bond with.   
        type: String

      - name: successCallback
        summary: Method to be invoked when the asynchronous call completes successfully.  
        type: Callback<Tizen.Bluetooth.BluetoothDevice> 
        optional: true

      - name: errorCallback
        summary:  Method to be invoked when an error occurs
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            function onBondingSuccess(device) {
                Ti.API.info("Device Name:" + device.name);
                Ti.API.info("Device Address:" + device.address);
                Ti.API.info("Device Service UUIDs:" + device.uuids.join("\n"));
            }
            function onError(e) {
                Ti.API.info ("Could not create bonding, reason:" + e.message);
            }
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            adapter.createBonding("35:F4:59:D1:7A:03", onBondingSuccess, onError);

  - name: destroyBonding
    summary: Destroys bonding with a remote device.   
    description: |
        This method initiates the process to remove the given address from the bonded devices list.
        The ErrorCallback is launched with these error types:
            NotFoundError: If there is no device with the given address.
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: address
        summary: Address of the bonded device.   
        type: String

      - name: successCallback
        summary: Method to be invoked when the asynchronous call completes successfully.  
        type: Callback<Object> 
        optional: true

      - name: errorCallback
        summary:  Method to be invoked when an error occurs
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            function gotDevice(device) {
                if (device.isBonded) {
                    // initiate destroying bonding
                    adapter.destroyBonding(device.address, function() { 
                       Ti.API.info("Unbound success with:" + device.address);
                    },
                    function(e) { 
                       Ti.API.info("Unbounding failed with " + device.address + ", reason: " + e.message); 
                    });
                }
            }
            var deviceAddress = "35:F4:59:D1:7A:03";
            adapter.getDevice(deviceAddress, gotDevice, function(e) { 
                    Ti.API.info("Failed to get device info for " + deviceAddress + ", reason: " + e.message); 
            });
 
  - name: registerRFCOMMServiceByUUID
    summary: Registers a service for other devices to consume.    
    description: |
        This method registers a service record in the device service record database with the specified uuid, name and auto assigned channel. On success of the service registration, it returns a BluetoothServiceHandler object as the first parameter of successCallback, and listens for client connections. The service handler can be used to be notified on client connections or to unregister the service. User interaction is mandatory to connect to a registered service and a link between devices is encrypted. This guarantees a registered service is securely protected.
        Clients should do service discovery on this device with a specified uuid to determine the right channel.
        If any client(remote device) connects to this service, then BluetoothServiceHandler.onconnect() is invoked with BluetoothSocket object.
        BluetoothServiceHandler.unregister() can be used to unregister the service record from the device service database and stop listening for client connections.
        The ErrorCallback is launched with these error types:
            InvalidValuesError: If any of the input parameters contain an invalid value.
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.spp

    parameters: 
      - name: uuid
        summary: UUID of the service, to which clients can connect.   
        type: String

      - name: name
        summary: Name of the service.    
        type: String

      - name: successCallback
        summary: Method to be called on successful service registration.   
        type: Callback<Tizen.Bluetooth.BluetoothServiceHandler> 
        optional: true

      - name: errorCallback
        summary: Method to be invoked when an error occurs
        type: Callback<Tizen.WebAPIError>
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            
            // Holds currently registered service record
            
            var chatServiceHandler = null;
            
            // Holds currently open socket
            
            var serviceSocket = null;
            
            function chatServiceSuccessCb(recordHandler) {
            
                Ti.API.info("Chat service registration succeeds!");
                chatServiceHandler = recordHandler;
                
                recordHandler.addEventListener('remotedeviceconnected', function(socket) {
                    Ti.API.info("Client connected: " + socket.peer.name + "," + socket.peer.address);
                    serviceSocket = socket;
                    
                    // Message received from remote device
                    socket.addEventListener('socketmessagereceived', function() {
                        var data = socket.readData();
                        
                        // handle message code goes here
                        //....
                    };
                    
                    socket.addEventListener('socketerror', function(e) {
                        Ti.API.info('Error: ' + e.message);
                    };
                    
                    socket.addEventListener('socketclosed', function() {
                        Ti.API.info('The socket is closed.');
                        serviceSocket = null;
                    };
                }
            };
            
            function publishChatService() {
            
                var CHAT_SERVICE_UUID = "5BCE9431-6C75-32AB-AFE0-2EC108A30860";
                
                adapter.registerRFCOMMServiceByUUID(CHAT_SERVICE_UUID, "Chat service", chatServiceSuccessCb,
                
                    // Error handler
                    function(e) {
                        Ti.API.error( "Could not register service record, Error: " + e.message);
                    }
                );
            }
            
            function unregisterChatService() {
            
                if (chatServiceHandler != null) {
                    chatServiceHandler.unregister(function() {
                        Ti.API.info("Chat service is unregistered");
                        chatServiceHandler = null;
                    }, function(e) {
                        Ti.API.info("Failed to unregister service: " + e.message);
                    });
                }
            }
 
events:
  - name: discoverystarted
    summary: The method to be invoked at the beginning of the device discovery process for finding the nearby Bluetooth device.
    
  - name: devicedisappeared
    summary: The method to be invoked when a device is lost from proximity. After that, this device is no longer visible.
    properties:
      - name: address
        summary: Address of the device that is no longer in range or visible.
        type: String
        
  - name: devicefound
    summary: The method to be invoked when a new device is discovered in the process of inquiry/discovery.
    properties:
      - name: device
        summary: Found device.
        type: Tizen.Bluetooth.BluetoothDevice

  - name: discoveryfinished
    summary: The method to be invoked when the device discovery process has finished.
    properties:
      - name: foundDevices
        summary: Array of devices found in this discovery session.
        type: Array<Tizen.Bluetooth.BluetoothDevice>
    
  - name: discoveryerror
    summary: The method to be invoked when a Bluetooth device is turned off or any other error case.
    properties:
      - name: error
        type: Tizen.WebAPIError
    
properties:
  - name: name
    summary: The readable name of the Bluetooth adapter.
    type: String
    permission: read-only

  - name: address
    summary: The unique hardware address of the Bluetooth adapter, also known as the MAC address. 
    type: String
    permission: read-only

  - name: powered
    summary: Holds the current state of Bluetooth adapter.   
    type: Boolean
    permission: read-only

  - name: visible
    summary: Holds the current visibility of the device.    
    type: Boolean
    permission: read-only

