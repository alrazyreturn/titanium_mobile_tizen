---
name: Tizen.Bluetooth.BluetoothAdapter
summary: The Bluetooth adapter interface that provides access to control the device's Bluetooth adapter.  
description: |
    This interface offers methods to control local Bluetooth behavior, such as:

    Turn on/off Bluetooth radio
    Scan for remote devices
    Access known devices
    Register a service in the device service database
extends: Titanium.Module
platforms: [tizen]
methods:

  - name: setName
    summary: Sets the local Bluetooth adapter name.
    description: |
        Sends a request to Bluetooth hardware to change the name of the local Bluetooth adapter to name.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.admin
    parameters: 
      - name: name
        summary: Name to set.
        type: String

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse>
        optional: true
    examples:
      - example: |
            Example 1:
            
                var tizen = require("tizen");
                var adapter = tizen.Bluetooth.getDefaultAdapter();
                
                function changeName(newName) {
                
                    if(adapter.name != newName) {
                    
                        // initiate change name
                        adapter.setName(newName,
                            function(response) {
                                if(response.success) {
                                    Ti.API.info("Adapter name changed to " + adapter.name);
                                } else {
                                    Ti.API.info("Failed to change name: " + reponse.error);
                                }
                            }
                        );
                    }
                }
                
                changeName("myDevice");
 
  - name: setPowered
    summary: Turns Bluetooth adapter on or off. 
    description: |
        Sends a request to Bluetooth hardware to change the state to a given state. For most Bluetooth actions, the Bluetooth adapter must be powered on.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.admin

    parameters: 
      - name: state
        summary: "State to set: true to power on Bluetooth, false to power it off." 
        type: Boolean

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse>
        optional: true
    examples:
      - example: |
            Example 1:
            
                var tizen = require("tizen");
                var adapter = tizen.Bluetooth.getDefaultAdapter();
                
                function powerOn() {
                    // if not powered on
                    if(!adapter.powered) {
                    
                        // initiate power on
                        adapter.setPowered(true,
                            function(response) {
                                if(response.success) {
                                    Ti.API.info("Bluetooth powered on success.");
                                } else {
                                    Ti.API.info("Failed to power on Bluetooth: " + response.error);
                                }
                            }
                        );
                    }
                }
                
                function powerOff() {
                
                    // if powered on
                    if(adapter.powered) {
                    
                        // initiate power off
                        adapter.setPowered(false,
                            function(response) {
                                if(response.success) {
                                    Ti.API.info("Bluetooth powered off successfully.");
                                } else {
                                    Ti.API.info("Failed to power on Bluetooth: " + response.error);
                                }
                            }
                        );
                    }
                }

  - name: stopDiscovery
    summary: Stops the device discovery process session, if active.   
    description: |
        Device discovery is a heavyweight procedure, hence we recommend stopping discovery as soon as required device is found. This method cancels an active discovery session.
        The ErrorCallback is launched with these error types:
            ServiceNotAvailableError: If a Bluetooth device is turned off.
            UnknownError: In any other error case.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse>
        optional: true
    examples:
      - example: |
            Example 1:
            
                var tizen = require("tizen"),
                    adapter = tizen.Bluetooth.getDefaultAdapter();
                
                // Call this whenever use selects one of the device
                function cancelDiscovery() {
                
                    adapter.stopDiscovery(
                        function(response) {
                            if(response.success) {
                                Ti.API.info("Stop discovery success.");
                            } else {
                                Ti.API.info("Error while stopDiscovery:" + response.error);
                            }
                        }
                    );
                }

                function startDiscovery() {
                    adapter.addEventListener('discoverystarted', function() {
                        Ti.API.info ("Device discovery started...") ;
                    }
                    
                    adapter.addEventListener('devicefound', function(e) {
                        Ti.API.info("Found device - name: " + e.device.name + ", Address: "+ e.device.address);
                        
                        // Show device to user, if this is the one he is looking for
                        // for example, add this to list view.
                        cancelDiscovery();
                    }
                    
                    adapter.addEventListener('devicedisappeared', function(e) {
                        Ti.API.info("Device disappeared: " + e.address);
                        // Remove from list, as it is no longer valid.
                    }
                    
                    adapter.addEventListener('discoveryfinished', function(e) {
                        var devices = e.devices;
                        Ti.API.info("Found Devices");
                        for (var i=0; i<devices.length; i++) {
                            Ti.API.info("Name: " + devices[i].name + ", Address: " + devices[i].address);
                        }
                        Ti.API.info("Total: " + devices.length);
                    }
                    
                    adapter.addEventListener('discoveryerror', function(e) {
                        Ti.API.error("Failed to search devices: " + e.error");
                    }
                }
                
                function onSetPoweredError(e) {
                    Ti.API.info("Could not turn on device, reason: " + e);
                }
                
                adapter.setPowered(true,
                    function(response){
                        if(! response.success) {
                            startDiscovery()
                        } else {
                            onSetPoweredError(response.error)
                        }
                    }
                );

  - name: getKnownDevices
    summary: Gets all the devices that have information stored in the local Bluetooth adapter.    
    description: |
        A known device is one of the following:
            a bonded device
            a device found in last inquiry process
        On success, it returns the list of currently known devices.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<getKnownDevicesResponse>
    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            function onGotDevices(devices) {
                Ti.API.info("Devices");
                for (var i=0; i < devices.length; i++) {
                    Ti.API.info(" Name: " + devices[i].name + ", Address: " + devices[i].address);
                }
                Ti.API.info("Total: " + devices.length);
            }
            function onError(e) {
                Ti.API.info ("Error: " + e);
            }
            function onBluetoothsetPowered() {
                adapter.getKnownDevices(
                    function(response){
                        if(response.success) {
                            onGotDevices(response.devices);
                        } else {
                            onError(response.error);
                        }
                    }
                );
            }
            // turn on Bluetooth
            adapter.setPowered(true,
                function(response){
                    if(response.success) {
                        onBluetoothsetPowered();
                    }
                }
            );

  - name: getDevice
    summary: Gets the BluetoothDevice object for a given device hardware address. 
    description: |
        This method returns device information stored in the local Bluetooth adapter for the specified device. A valid hardware address must be passed, such as "35:F4:59:D1:7A:03".
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: address
        summary: Address of a remote Bluetooth device to get.  
        type: String

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<getDeviceResponse>
        optional: true
    examples:
      - example: |
            function gotDeviceInfo(device) {
                Ti.API.info("Device Name: " + device.name);
                Ti.API.info("Device Address: " + device.address);
                Ti.API.info("Device Class: " + device.deviceClass.major);
                Ti.API.info("Is Bonded: " + device.isBonded ? "Yes" : "No");
            }
            function onError(e) {
                Ti.API.info ("Could not get device info:" + e);
            }
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            adapter.getDevice("35:F4:59:D1:7A:03",
                function(response){
                    if(response.success) {
                        gotDeviceInfo(response.device);
                    } else {
                        onError(response.error)
                    }
                }
            );

  - name: createBonding
    summary: Initiates the bonding process with a remote device.  
    description: |
        To communicate with any remote Bluetooth device, it must be bonded (that is, the device should be authenticated). Only bonded devices can connect to services and exchange data with each other. This method initiates the bonding process with peer device, using the given MAC address.
        If the bonding process is successful, the device information is sent through callback.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: address
        summary: The MAC address of remote Bluetooth address to bond with.   
        type: String

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<createBondingResponse>
        optional: true
    examples:
      - example: |
            function onBondingSuccess(device) {
                Ti.API.info("Device Name:" + device.name);
                Ti.API.info("Device Address:" + device.address);
                Ti.API.info("Device Service UUIDs:" + device.uuids.join("\n"));
            }
            function onError(e) {
                Ti.API.info ("Could not create bonding, reason:" + e);
            }
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            adapter.createBonding("35:F4:59:D1:7A:03",
                function(response){
                    if(response.success) {
                        onBondingSuccess(response.device);
                    } else {
                        onError(response.error)
                    }
                }
            );

  - name: destroyBonding
    summary: Destroys bonding with a remote device.   
    description: |
        This method initiates the process to remove the given address from the bonded devices list.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.gap

    parameters: 
      - name: address
        summary: Address of the bonded device.   
        type: String

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<ErrorResponse>
        optional: true
    examples:
      - example: |
            var tizen = require("tizen");
            var adapter = tizen.Bluetooth.getDefaultAdapter();
            function gotDevice(device) {
                if (device.isBonded) {
                    // initiate destroying bonding
                    adapter.destroyBonding(device.address,
                        function(response) {
                            if(response.success) {
                                Ti.API.info("Unbound success with:" + device.address);
                            } else {
                                Ti.API.info("Unbounding failed with " + device.address + ", reason: " + response.error);
                            }
                        }
                    );
                }
            }
            var deviceAddress = "35:F4:59:D1:7A:03";
            adapter.getDevice(deviceAddress,
                function(response){
                    if(response.success){
                        gotDevice(response.device);
                    } else {
                        Ti.API.info("Failed to get device info for " + e);
                    }
                }
            );
 
  - name: registerRFCOMMServiceByUUID
    summary: Registers a service for other devices to consume.    
    description: |
        This method registers a service record in the device service record database with the specified uuid, name and auto assigned channel. On success of the service registration, it returns a Tizen.Bluetooth.BluetoothServiceHandler object as the first parameter of successCallback, and listens for client connections. The service handler can be used to be notified on client connections or to unregister the service. User interaction is mandatory to connect to a registered service and a link between devices is encrypted. This guarantees a registered service is securely protected.
        Clients should do service discovery on this device with a specified uuid to determine the right channel.
        [unregister](Tizen.Bluetooth.BluetoothServiceHandler.unregister) can be used to unregister the service record from the device service database and stop listening for client connections.
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.spp

    parameters: 
      - name: uuid
        summary: UUID of the service, to which clients can connect.   
        type: String

      - name: name
        summary: Name of the service.    
        type: String

      - name: callback
        summary: Function to invoke on success or failure.
        type: Callback<registerRFCOMMServiceByUUIDResponse>
        optional: true
    examples:
      - example: |
            Example 1:
            
                var tizen = require("tizen");
                var adapter = tizen.Bluetooth.getDefaultAdapter();
                
                // Holds currently registered service record
                
                var chatServiceHandler = null;
                
                // Holds currently open socket
                
                var serviceSocket = null;
                
                function chatServiceSuccessCb(recordHandler) {
                
                    Ti.API.info("Chat service registration succeeds!");
                    chatServiceHandler = recordHandler;
                    
                    recordHandler.addEventListener('remotedeviceconnected', function(e) {
                        var socket = e.socket;
                        
                        Ti.API.info("Client connected: " + socket.peer.name + "," + socket.peer.address);
                        serviceSocket = socket;
                        
                        // Message received from remote device
                        socket.addEventListener('socketmessagereceived', function() {
                            var data = socket.readData();
                            
                            // handle message code goes here
                            //....
                        };
                        
                        socket.addEventListener('socketerror', function(e) {
                            Ti.API.info('Error: ' + e.message);
                        };
                        
                        socket.addEventListener('socketclosed', function() {
                            Ti.API.info('The socket is closed.');
                            serviceSocket = null;
                        };
                    }
                };
                
                function publishChatService() {
                
                    var CHAT_SERVICE_UUID = "5BCE9431-6C75-32AB-AFE0-2EC108A30860";
                    
                    adapter.registerRFCOMMServiceByUUID(CHAT_SERVICE_UUID, "Chat service",
                        function(response){
                            if(response.success) {
                                chatServiceSuccessCb(response.handler);
                            } else {
                                Ti.API.error( "Could not register service record, Error: " + response.error);
                            }
                        }
                    );
                }
                
                function unregisterChatService() {
                
                    if (chatServiceHandler != null) {
                        chatServiceHandler.unregister(
                            function(response) {
                                if(response.success) {
                                    Ti.API.info("Chat service is unregistered");
                                    chatServiceHandler = null;
                                } else {
                                    Ti.API.info("Failed to unregister service: " + response.error);
                                }
                            }
                        );
                    }
                }
 
events:
  - name: discoverystarted
    summary: The method to be invoked at the beginning of the device discovery process for finding the nearby Bluetooth device.
    
  - name: devicedisappeared
    summary: The method to be invoked when a device is lost from proximity. After that, this device is no longer visible.
    properties:
      - name: source
        summary: Source object that fired the event.
        type: Tizen.Bluetooth.BluetoothServiceHandler
        
      - name: type
        summary: Name of the event fired.
        type: String

      - name: address
        summary: Address of the device that is no longer in range or visible.
        type: String
        
  - name: devicefound
    summary: The method to be invoked when a new device is discovered in the process of inquiry/discovery.
    properties:
      - name: source
        summary: Source object that fired the event.
        type: Tizen.Bluetooth.BluetoothServiceHandler
        
      - name: type
        summary: Name of the event fired.
        type: String

      - name: device
        summary: Found device.
        type: Tizen.Bluetooth.BluetoothDevice

  - name: discoveryfinished
    summary: The method to be invoked when the device discovery process has finished.
    properties:
      - name: source
        summary: Source object that fired the event.
        type: Tizen.Bluetooth.BluetoothServiceHandler
        
      - name: type
        summary: Name of the event fired.
        type: String

      - name: foundDevices
        summary: Array of devices found in this discovery session.
        type: Array<Tizen.Bluetooth.BluetoothDevice>
    
  - name: discoveryerror
    summary: The method to be invoked when a Bluetooth device is turned off or any other error case.
    properties:
      - name: error
        summary: If `success` is false, a string describing the error.
        type: String

      - name: code
        summary: If `success` is false, the error code if available.
    
properties:
  - name: name
    summary: The readable name of the Bluetooth adapter.
    type: String
    permission: read-only

  - name: address
    summary: The unique hardware address of the Bluetooth adapter, also known as the MAC address. 
    type: String
    permission: read-only

  - name: powered
    summary: Holds the current state of Bluetooth adapter.   
    type: Boolean
    permission: read-only

  - name: visible
    summary: Holds the current visibility of the device.    
    type: Boolean
    permission: read-only

---
name: getKnownDevicesResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [getKnownDevices](Tizen.Bluetooth.BluetoothAdapter.getKnownDevices) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String

  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number

  - name: devices
    summary:  List of devices known to local Bluetooth adapter. Each element is a Tizen.Bluetooth.BluetoothDevice.
    description: Will be undefined if `success` is `false`.
    type: Array<Tizen.Bluetooth.BluetoothDevice>

---
name: getDeviceResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [getDevice](Tizen.Bluetooth.BluetoothAdapter.getDevice) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String

  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number

  - name: device
    summary:  Tizen.Bluetooth.BluetoothDevice object.
    description: Will be undefined if `success` is `false`.
    type: Tizen.Bluetooth.BluetoothDevice

---
name: createBondingResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [createBonding](Tizen.Bluetooth.BluetoothAdapter.createBonding) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String

  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number

  - name: device
    summary:  Tizen.Bluetooth.BluetoothDevice object.
    description: Will be undefined if `success` is `false`.
    type: Tizen.Bluetooth.BluetoothDevice

---
name: registerRFCOMMServiceByUUIDResponse
platforms: [tizen]
summary: |
    Simple object returned in the callback from
    [registerRFCOMMServiceByUUID](Tizen.Bluetooth.BluetoothAdapter.registerRFCOMMServiceByUUID) method.
extends: ErrorResponse
properties:
  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String

  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number

  - name: handler
    summary: Bluetooth service handler.
    description: Will be undefined if `success` is `false`.
    type: Tizen.Bluetooth.BluetoothServiceHandler

