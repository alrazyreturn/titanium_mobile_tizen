---
name: Tizen.Bluetooth.BluetoothSocket
summary: The interface to represent the Bluetooth socket.   
description: The socket object is created by BluetoothDevice.connectToServiceByUUID() or BluetoothAdapter.registerRFCOMMServiceByUUID().
extends: Titanium.Proxy
platforms: [tizen]
methods:

  - name: writeData
    summary: Writes data onto the socket. 
    description: |
        Writes a sequence of bytes onto the socket and returns the number of bytes actually written. 
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.spp
    returns: 
      - type: Number
        summary: The number of bytes actually sent. 
    parameters: 
      - name: data
        summary: Data to send. 
        type: Array<Number>
    examples:
      - example: |
            Example 1:
            
                var tizen = require("tizen"),
                    adapter = tizen.Bluetooth.getDefaultAdapter();
                    
                function onSocketConnected(socket) {
                    Ti.API.info ("Opened connection to remote device");
                    // Message received from remote device
                    socket.addEventListener('socketmessagereceived', function() {
                        var data = socket.readData();
                        
                        // handle message code goes here
                        //....
                    };
                    
                    socket.addEventListener('socketerror', function(e) {
                        Ti.API.info('Error: ' + e.message);
                    };
                    
                    socket.addEventListener('socketclosed', function() {
                        Ti.API.info('The socket is closed.');
                        serviceSocket = null;
                    };
                    
                    // send data to peer.
                    var textmsg = "Test",                
                        sendtextmsg = new Array(),
                        i = 0,
                        len = textmsg.length;
                    
                    for (; i < len; i++) {
                        sendtextmsg[i] = textmsg.charCodeAt(i);
                    }
                    socket.writeData (sendtextmsg);
                }
                
                function onSocketError(e) {
                   Ti.API.info ("Error connecting to service. Reason: " + e.error);
                }
                
                function onDeviceReady(device) {
                
                    // validate service uuid
                    if (device.uuids.indexOf("5BCE9431-6C75-32AB-AFE0-2EC108A30860") != -1) {
                    
                        // open socket
                        device.connectToServiceByUUID("5BCE9431-6C75-32AB-AFE0-2EC108A30860",
                            function(response){
                                if(response.success) {
                                    onSocketConnected(response.socket);
                                } else {
                                    onSocketError(response.error);
                                }
                            }
                        );
                    }
                }
                
                function onSetPowered() {
                    // get the BluetoothDevice object
                    adapter.getDevice("35:F4:59:D1:7A:03",
                        function(response){
                            if(response.success) {
                                onDeviceReady(response.device);
                            } else {
                                Ti.API.info("Error: " + response.error);
                            }
                        }
                    );
                }
                
                adapter.setPowered(true, onSetPowered, function(e) {Ti.API.info("Could not turn on Bluetooth adapter. reason: " + e.message); });
 
  - name: readData
    summary: Reads data from the socket. 
    description: |
        This should be called only in the 'socketmessagereceived' handler, that is, when data is ready on the socket. 
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.spp
    returns: 
      - type: Array<Number>
        summary: Sequence of bytes successfully read. 
    examples:
      - example: |
            Example 1:
            
                var tizen = require("tizen");
                var adapter = tizen.Bluetooth.getDefaultAdapter();
                
                function onError(e) {
                    Ti.API.info ("Error connecting to service. Reason: " + e);
                }
                
                function onSocketConnected(socket) {
                
                    Ti.API.info ("Opening socket success!!!");
                    
                    // Message received from remote device
                    socket.addEventListener('socketmessagereceived', function() {
                        var data = socket.readData();
                        
                        // handle message code goes here
                        //....
                    };
                    
                    socket.addEventListener('socketerror', function(e) {
                        Ti.API.info('Error: ' + e.error);
                    };
                    
                    socket.addEventListener('socketclosed', function() {
                        Ti.API.info("Socket closed with " + socket.peer.name);
                    };
                    
                }
                
                function onDeviceReady(device) {
                
                    // validate service uuid
                    if (device.uuids.indexOf("5BCE9431-6C75-32AB-AFE0-2EC108A30860") != -1) {
                    
                        // open socket
                        device.connectToServiceByUUID("5BCE9431-6C75-32AB-AFE0-2EC108A30860",
                            function(response){
                                if(response.success){
                                    onSocketConnected(response.socket);
                                } else {
                                    onError(response.error);
                                }
                            }
                        );
                    }
                }
                
                function onSetPowered() {
                
                    // get the BluetoothDevice object
                    adapter.getDevice("35:F4:59:D1:7A:03",
                        function(response){
                            if(response.success) {
                                onDeviceReady(response.device);
                            } else {
                                Ti.API.info("Error: " + response.error);
                            }
                        }
                    );
                }
                
                adapter.setPowered(true,
                    function(response){
                        if(response.success) {
                            onSetPowered();
                        } else {
                            Ti.API.info ("Could not turn on Bluetooth adapter. reason: " + response.error);
                        }
                    }
                );
 
  - name: close
    summary: Closes the socket.  
    description: |
        Calling this method closes the socket. BluetoothSocket.state changes to <Tizen.Bluetooth.BLUETOOTH_SOCKET_STATE_CLOSED>, and  'socketclosed' is invoked on success. 
        
        To use this method, it is required to include the following privilege in the tiapp.xml file of your Titanium application: http://tizen.org/privilege/bluetooth.spp

events:
  - name: socketmessagereceived
    summary: The callback to be invoked when an incoming message is received from the peer.
  
  - name: socketclosed
    summary: The callback to be invoked when the socket is closed.
    
  - name: socketerror
    summary: The callback to be invoked when an error occurs.
    properties:
      - name: error
        summary: If `success` is false, a string describing the error.
        type: String

      - name: code
        summary: If `success` is false, the error code if available.

properties:
  - name: uuid
    summary: Service UUID to which this socket is connected. 
    type: String
    permission: read-only

  - name: state
    summary: |
        The current socket state.  The value is one of the constants defined for this type. The supported state types are: <Tizen.Bluetooth.BLUETOOTH_SOCKET_STATE_CLOSED>, and <Tizen.Bluetooth.BLUETOOTH_SOCKET_STATE_OPEN>.
    type: String
    permission: read-only

  - name: peer
    summary: The peer device to which this socket is connected. 
    type: Tizen.Bluetooth.BluetoothDevice
    permission: read-only
