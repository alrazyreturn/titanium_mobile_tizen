---
name: Titanium.Tizen.Filesystem.File
summary: The file interface.
description: |
    This interface represents the file abstraction in use. 
    A file handle represents a file if the isFile property is true, 
    if the isFile property is false, the file handle represents a directory. 
    
    If a file handle represents a directory, it can address files and directories.
    
    The file object permissions for the file object location and tree rooted at that location depends upon the mode defined in the resolve method. 
    When a File object creates a child File object, the new File object inherits its access rights from the parent object without any reference to 
    the security framework, as noted in certain methods of File.
    
    A file handle representing a file can be opened for I/O operations, such as reading and writing.
    
    A file handle representing a directory can be used for listing all files and directories rooted as the file handle location.
extends: Titanium.Proxy
platforms: [tizen]
createable: false

examples:
  - title: Code example
    example:    |
        function onsuccess(files) {
           for(var i = 0; i < files.length; i++) {
             // alerts each name of dir's contents
             Ti.API.info(files[i].name);
           }
         }

         function onerror(error) {
           Ti.API.info("The error " + error.message + "
                       occurred when listing the files in the selected folder");
         }

         // list directory contents
         dir.listFiles(onsuccess, onerror);

methods:
  - name: toURI
    summary: Returns a URI for the file.
    description: |
        Returns a URI that can be used to identify this entry (such as using it as the src attribute on an HTML img element). 
        The URI has no specific expiration, it should be valid at least as long as the file exists.
        
        When this method is invoked, the implementation MUST generate a URI.
        
        If that URI corresponds to any of the public virtual roots (that is images, videos, music, documents, and downloads) the URI MUST be globally unique and could be used by any widget.
        
        If that URI corresponds to a file located in any of the widget private areas (such as wgt-package, wgt-private, wgt-private-tmp). 
        The generated URI MUST be unique for that file and for the widget making the request (such as including some derived from the widget id in the URI). 
        These URIs MUST NOT be accessible to other widgets, apart from the one invoking this method.
    returns:
        summary: The URI that identifies the file or null if an error occurs.
        type: String
    examples:
      - example: |
             /*'file://music/ramones/RockawayBeach.mp3' or 'file:///opt/media/music/ramones/RockawayBeach.mp3' if the file is
             music/ramones/RockawayBeach.mp3*/
             Ti.API.info(file.toURI());

  - name: listFiles
    summary: Returns the list of all files in this directory.
    description: |
        The list of files will be passed as a File[] in the onsuccess and contains directories and files. However, the directories "." and ".." MUST NOT be returned. Each File object part of the array MUST inherit all the access rights (that is one of the values in FileMode) from the File object in which this method was invoked.
        
        If the filter is passed and contains valid values, only those directories and files in the directory that match the filter criteria specified in the FileFilter interface MUST be returned in the onsuccess. If no filter is passed, the filter is null or undefined, or the filter contains invalid values, the implementation MUST return the full list of files in the directory.
        If the directory does not contain any files or directories, or the filter criteria is unmatched to any files or directories, the onsuccess will be invoked with an empty array.
        The ErrorCallback is launched with these error types:
            - IOError: The operation is launched on a file (not a directory).
            - InvalidValuesError: If any of the input parameters contain an invalid value.
            - UnknownError: In any other error case.
    parameters:
      - name: onsuccess
        summary: Called when the list operation has been successfully completed
        type: Callback<Array<Titanium.Tizen.Filesystem.File>>
      - name: onerror
        summary: Called if an error occurred
        type: Callback<WebAPIError>        
        optional: true
      - name: filter 
        summary: Used to restrict the listed files.
        type: FileFilter
        optional: true
    examples:
      - example: |
             function onsuccess(files) {
                 Ti.API.info("There are " + files.length  + " in the selected folder");
             }

             function onerror(error) {
                 Ti.API.info("The error " + error.message + " occurred when listing the files in the selected folder");
             }

             Ti.Tizen.Filesystem.resolve(
                "documents",
                function(dir){
                  dir.listFiles(onsuccess, onerror);
                }, function(e){
                  Ti.API.info("Error " + e.message);
                }, Ti.Tizen.Filesystem.FILE_MODE_R
             );
        
  - name: openStream
    summary: Opens the file in the given mode supporting the given encoding.
    description: |
        This operation is performed asynchronously. If the file is opened successfully, the onsuccess is invoked with a FileStream that can be used for reading and writing the file, depending on the mode. The return FileStream instance includes a file pointer, which represents the current position in the file. The filepointer will, by default, be at the start of the file, except in the case of opening with append (Ti.Tizen.Filesystem.FILE_MODE_A) mode, in which case the filepointer points to the end of the file.
        The ErrorCallback is launched with these error types:
            - InvalidValuesError: If any of the input parameters contains an invalid value.
            - IOError: The operation is launched on a directory (not a file), the file is not valid or it does not exist.
            - UnknownError: In any other error case.
    parameters:
      - name: mode  
        summary: |
            The mode for opening a file: Ti.Tizen.Filesystem.FILE_MODE_R for reading Ti.Tizen.Filesystem.FILE_MODE_A for appending Ti.Tizen.Filesystem.FILE_MODE_W for [over]writing Ti.Tizen.Filesystem.FILE_MODE_RW for reading and writing
        type: String
      - name: onsuccess
        summary: Called when the file has been opened.
        type: Callback<Titanium.Tizen.Filesystem.FileStream>
      - name: onerror
        summary: Called if an error occurred.
        type: Callback<WebAPIError>        
        optional: true
      - name: encoding  
        summary:  |
            The encoding for read/write operations on the file, at least the following encodings MUST be supported: "UTF-8" default encoding, "ISO-8859-1" latin1 encoding.
            If no encoding is passed by the developer, then the default platform encoding MUST be used.
        type: String
        optional: true
    examples:
      - example: |
            var documentsDir;

            function onsuccess(files) {
                for(var i = 0; i < files.length; i++) {
                   Ti.API.info("File Name is " + files[i].name); // displays file name
                }
                var testFile = documentsDir.createFile("test.txt");
                if (testFile != null) {
                   testFile.openStream(
                      Ti.Tizen.Filesystem.FILE_MODE_W,
                      function(fs){
                         fs.write("HelloWorld");
                         fs.close();
                      }, function(e){
                         Ti.API.info("Error " + e.message);
                      }, "UTF-8"
                   );
                }
            }

            function onerror(error) {
                Ti.API.info("The error " + error.message + " occurred when listing the files in the selected folder");
            }

            Ti.Tizen.Filesystem.resolve(
                'documents',
                function(dir){
                   documentsDir = dir;
                   dir.listFiles(onsuccess,onerror);
                }, function(e) {
                   Ti.API.info("Error" + e.message);
                }, Ti.Tizen.Filesystem.FILE_MODE_RW
            );

  - name: readAsText
    summary: Reads the content of a file as a String.
    description: |
        If the operation is successfully executed, the onsuccess is invoked and a DOMString is passed as input parameter that represents the file content in the format determined by the encoding parameter.
        The ErrorCallback is launched with these error types:
            - InvalidValuesError: If any of the input parameters contain an invalid value.
            - IOError: The operation is launched on a directory (not a file), the file is not valid, or the file does not exist.
            - UnknownError: In any other error case.
    parameters:
      - name: onsuccess
        summary: Called when the file has been successfully read.
        type: Callback<String>
      - name: onerror
        summary: If an error occurs while reading the file.
        type: Callback<WebAPIError>        
        optional: true
      - name: encoding  
        summary:  |
            The encoding for read/write operations on the file, at least the following encodings MUST be supported: "UTF-8" default encoding, "ISO-8859-1" latin1 encoding. 
            If no encoding is passed by the developer, then the default platform encoding MUST be used.
        type: String
        optional: true
    examples:
      - example: |
            function onsuccess(files) {
               for(var i = 0; i < files.length; i++) {
                 Ti.API.info("File Name is " + files[i].name); // displays file name
                 if (files[i].isDirectory == false)
                   files[i].readAsText(
                       function(str){
                         Ti.API.info("The file content " + str);
                       }, function(e){
                         Ti.API.info("Error " + e.message);
                       }, "UTF-8"
                   );
               }
             }

             function onerror(error) {
               Ti.API.info("The error " + error.message + " occurred when listing the files in the selected folder");
             }

             var documentsDir;
             Ti.Tizen.Filesystem.resolve(
                 'documents',
                 function(dir){
                   documentsDir = dir;
                   dir.listFiles(onsuccess,onerror);
                 }, function(e) {
                   Ti.API.info("Error" + e.message);
                 }, Ti.Tizen.Filesystem.FILE_MODE_RW
             );

  - name: copyTo
    summary: |
        Copies (and overwrites if possible and specified) a file or a directory from a specified location to another specified location.
    description: |
        The copy of the file or directory identified by the originFilePath parameter MUST be created in the path passed in the destinationFilePath parameter.
        The file or directory to be copied MUST be under the Directory from which the method is invoked, otherwise the operation MUST NOT be performed.
        If the copy is performed successfully, the onsuccess is invoked.
        
        The ErrorCallback is launched with these error types:
            - InvalidValuesError: If any of the input parameters contain an invalid value.
            - NotFoundError: originFilePath does not correspond to a valid file or destinationPath is not a valid path.
            - IOError: The File in which the copyTo method is invoked is a file (not a directory), originFilePath corresponds to a file or directory in use by another process, overwrite parameter is false and destinationFilePath corresponds to an existing file or directory.
            - UnknownError: In any other error case.
    parameters:
      - name: originFilePath  
        summary: The origin full virtual file or directory path, it must be under the current directory.
        type: String
      - name: destinationFilePath
        summary: The new full virtual file path or directory path.
        type: String
      - name: overwrite
        summary: true enforces overwriting an existing file.
        type: Boolean
      - name: onsuccess
        summary: Called when the file has been copied.
        type: Callback<Object>
      - name: onerror
        summary: Called if an error occurred.
        type: Callback<WebAPIError>
        optional: true
    examples:
      - example: |
            var documentsDir;
             function onsuccess(files) {
               for(var i = 0; i < files.length; i++) {
                 if (files[i].isDirectory == false)
                   documentsDir.copyTo(files[i].fullPath,
                                       "images/backup/"+files[i].name,
                                       false,
                                       function(){Ti.API.info("file copied");});
               }
             }

             function onerror(error) {
               Ti.API.info("The error " + error.message +
                           " occurred when listing the files in the selected folder");
             }

             Ti.Tizen.Filesystem.resolve(
                 'documents',
                 function(dir){
                   documentsDir = dir;
                   dir.listFiles(onsuccess, onerror);
                 }, function(e) {
                   Ti.API.info("Error" + e.message);
                 }, Ti.Tizen.Filesystem.FILE_MODE_RW
             );

  - name: moveTo
    summary: Moves a file or a directory from a specified location to another.
    description: |
        The file or directory will be moved (and will overwrite if possible and specified) atomically to the given path. This operation is different from instantiating copyTo and then deleting the original file, as on certain platforms, this operation does not require extra disk space.
        The file or directory identified by the originFilePath parameter MUST be moved to the path passed in the destinationFilePath parameter.
        The file to be moved MUST be under the Directory from which the method is invoked, otherwise the operation MUST NOT be performed.
        If the file or directory is moved successfully, the onsuccess is invoked.
        
        The ErrorCallback is launched with these error types:
            - InvalidValuesError: If any of the input parameters contain an invalid value.
            - NotFoundError: originFilePath does not correspond to a valid file or destinationPath is not a valid path.
            - IOError: The File in which the moveTo method is invoked is a file (not a directory), originFilePath corresponds to a file or directory in use by another process, overwrite parameter is false and destinationFilePath corresponds to an existing file or directory.
            - UnknownError: In any other error case.
    parameters:
      - name: originFilePath  
        summary: The origin full virtual file or directory path, it must be under the current directory.
        type: String
      - name: destinationFilePath
        summary: The new full virtual file path or directory path.
        type: String
      - name: overwrite  
        summary: true enforces overwriting an existing file.
        type: Boolean
      - name: onsuccess
        summary:  Called when the file has been moved.
        type: Callback<Object>
      - name: onerror
        summary: Called if an error occurred. 
        type: Callback<WebAPIError>        
        optional: true
    examples:
      - example: |
            var documentsDir;
             function onsuccess(files) {
               for(var i = 0; i < files.length; i++) {
                 if (files[i].isDirectory == false)
                   documentsDir.moveTo(files[i].fullPath,
                                       "images/newFolder/"+files[i].name,
                                       false,
                                       function(){Ti.API.info("file moved");});
               }
             }

             function onerror(error) {
               Ti.API.info("The error " + error.message +
                           " occurred during listing the files in the selected folder");
             }

             Ti.Tizen.Filesystem.resolve(
                 'documents',
                 function(dir){
                   documentsDir = dir;
                   dir.listFiles(onsuccess, onerror);
                 }, function(e) {
                   Ti.API.info("Error" + e.message);
                 }, Ti.Tizen.Filesystem.FILE_MODE_RW
             );

  - name: createDirectory
    summary: Creates a new directory.
    description: |
        A new directory will be created relative to the current directory that this operation is performed on. The implementation will attempt to create all necessary sub-directories specified in the dirPath, as well. 
        The use of "." or ".." in path components is not supported.
        This operation can only be performed on file handlers that represent a directory (that is, isDirectory == true).
        If the directory is successfully created, it will be returned.
        In case the directory cannot be created, an error MUST be thrown with the appropriate error type.
    returns:
        summary: The file handle of the new directory. The new File object will have Ti.Tizen.Filesystem.FILE_MODE_RW access rights, as it inherits this from the File object on which the createDirectory() method is called.
        type: Titanium.Filesystem.File
    parameters:
      - name: dirPath   
        summary: The relative directory path, it should only contain characters supported by the underlying filesystem.
        type: String
    examples:
      - example: |
            var newDir = dir.createDirectory("newDir");
            var anotherNewDir = dir.createDirectory("newDir1/subNewDir1");

  - name: createFile
    summary: Creates a new empty file in a specified location.
    description: |
        A new empty file is created in the given path relative to the current directory the operation is performed on. 
        The use of "." or ".." in path components is not supported.
        
        This operation can only be performed on file handlers that represent a directory (that is, isDirectory == true).
        
        If the file is successfully created, a file handler MUST be returned by this method.
        
        In case the file cannot be created, an error MUST be thrown with the appropriate error type.
    returns:
        summary: The file handle of the new empty file. The new File object will have Ti.Tizen.Filesystem.FILE_MODE_RW access rights, as it inherits this from the File object on which the createFile() method is called.
        type: Titanium.Filesystem.File
    parameters:
      - name: filePath   
        summary: The new file path, it should only contain characters supported by the underlying filesystem.
        type: String
    examples:
      - example: |
            var newFile = dir.createFile("newFilePath");

  - name: resolve
    summary: Resolves an existing file or directory relative to the current directory this operation is performed on, and returns a file handle for it.
    description: |
        The filePath is not allowed to contain the "." or ".." directories.
        
        The encoding of file paths is UTF-8.
    returns:
        summary: The file handle of the file. The new File object will inherit its access rights from the File object on which this resolve() method is called.
        type: Titanium.Filesystem.File
    parameters:
      - name: filePath   
        summary: The relative file/directory path to resolve.
        type: String
    examples:
      - example: |
            var file;
            // Resolves helloWorld.doc file that is located in the
            // documents root location
            Ti.Tizen.Filesystem.resolve(
               'documents',
               function(dir){ file = dir.resolve("helloWorld.doc");},
               function(e){ Ti.API.info("Error" + e.message);},
               Ti.Tizen.Filesystem.FILE_MODE_RW);

  - name: deleteDirectory
    summary: Deletes a specified directory and directory tree if specified.
    description: |
        This function attempts to asynchronously delete a directory or directory tree under the current directory.
        If the recursive parameter is set to true, all the directories and files under the specified directory MUST be deleted. If the recursive parameter is set to false, the directory will only be deleted if it is empty, otherwise an IOError error type will be passed in onerror.
        The directory to be deleted MUST be under the Directory that the method is invoked from, otherwise the operation MUST NOT be performed. If the deletion is performed successfully, the onsuccess is invoked.
        The ErrorCallback is launched with these error types:
            - InvalidValuesError: If any of the input parameters contain an invalid value.
            - NotFoundError: The passed directory does not correspond to a valid directory.
            - IOError: The File in which the delete method is invoked is a file (not a directory), the directory is in use by another process or the directory is not empty and recursive argument is false. This code will be also used if a recursive deletion partially fails and any data deleted so far cannot be recovered. This may occur due to the lack of filesystem permissions or if any directories or files are opened by other processes.
            - UnknownError: In any other error case.
    parameters:
      - name: directory  
        summary:  The full virtual path to the directory to be deleted (must be under the current one).
        type: String
      - name: recursive
        summary: true means a recursive deletion. This will delete all data in all subdirectories. Use with caution.
        type: Boolean
      - name: onsuccess
        summary: Called if the directory is successfully deleted.
        type: Callback<Object>
        optional: true
      - name: onerror
        summary: Called if an error occurred. 
        type: Callback<WebAPIError>        
        optional: true
    examples:
      - example: |
            var documentsDir;
             function onsuccess(files) {
               for(var i = 0; i < files.length; i++) {
                 if (files[i].isDirectory)
                   documentsDir.deleteDirectory(
                       files[i].fullPath,
                       false,
                       function(){
                         Ti.API.info("Directory Deleted");
                       }, function(e) {
                         Ti.API.info("Error" + e.message);
                       });
                 else
                   documentsDir.deleteFile(
                       files[i].fullPath,
                       function(){
                         Ti.API.info("File Deleted");
                       }, function(e) {
                         Ti.API.info("Error" + e.message);
                       });
               }
             }

             function onerror(error) {
               Ti.API.info("The error " + error.message + " occurred when listing the files in the selected folder");
             }

             Ti.Tizen.Filesystem.resolve(
                 'documents',
                 function(dir){
                   documentsDir = dir;
                   dir.listFiles(onsuccess,onerror);
                 }, function(e) {
                   Ti.API.info("Error" + e.message);
                 }, Ti.Tizen.Filesystem.FILE_MODE_RW
             );

  - name: deleteFile
    summary: Deletes a specified file.
    description: |
        This function attempts to asynchronously delete a file under the current directory.
        The file to be deleted MUST be under the Directory from which the method is invoked, otherwise the operation MUST NOT be performed.
        If the deletion is performed successfully, the onsuccess is invoked.
        
        The ErrorCallback is launched with these error types:
            - InvalidValuesError: If any of the input parameters contain an invalid value.
            - NotFoundError: The file does not correspond to a valid file.
            - IOError: The file in which the delete method is invoked is a file (not a directory), the file is in use by another process, or there is no permission in the file system.
            - UnknownError: In any other error case.
    parameters:
      - name: file  
        summary: The full virtual path to the file to be deleted (must be under the current directory).
        type: String
      - name: onsuccess
        summary: Called if the file is successfully deleted.
        type: Callback<Object>
        optional: true
      - name: onerror
        summary: Called if an error occurred. 
        type: Callback<WebAPIError>        
        optional: true
    examples:
      - example: |
            function onsuccess(files) {
               for(var i = 0; i < files.length; i++) {
                 if (files[i].isDirectory)
                   documentsDir.deleteDirectory(
                       files[i].fullPath,
                       false,
                       function(){
                         Ti.API.info("File Deleted");
                       }, function(e) {
                         Ti.API.info("Error" + e.message);
                       });
                 else
                   documentsDir.deleteFile(
                       files[i].fullPath,
                       function(){
                         Ti.API.info("Directory Deleted");
                       }, function(e) {
                         Ti.API.info("Error" + e.message);
                       });
               }
            }

            function onerror(error) {
               Ti.API.info("The error " + error.message + " occurred when listing the files in the selected folder");
            }

            var documentsDir;
            Ti.Tizen.Filesystem.resolve(
               'documents',
               function(dir){
                 documentsDir = dir;
                 dir.listFiles(onsuccess,onerror);
               }, function(e){
                 Ti.API.info("Error" + e.message);
               }, Ti.Tizen.Filesystem.FILE_MODE_RW
            );
 
properties:

  - name: parent
    summary: |
        The parent directory handle.
        null if there is no parent directory.
        If there is no parent directory, this represents a root location.
    type: Titanium.Filesystem.File
    permission: read-only
    examples:
      - example: |
            // list directory contents
             dir.listFiles(onsuccess, onerror);

             function onsuccess(files) {
               for(var i = 0; i < files.length; i++) {
                 // prints the file parent, should contain the
                 // same value for all the files in the loop
                 Ti.API.info("All the files should have the same parent " + files[i].parent);
               }
             }

             function onerror(error){
               Ti.API.info("The error " + error.message + " occurred when listing the files in the selected folder");
             }
  - name: readOnly
    summary: |
        The file/directory access state in the filesystem.
        true if object has read-only access at its location.
        false if object has write access at its location.
        This attribute represents the actual state of a file or directory in the filesystem. 
        Its value is not affected by the mode used in FileSystem.resolve 
        that was used to create the File object from which this File object was obtained.
    type: Boolean
    permission: read-only
    examples:
      - example: |
            // list directory contents
             dir.listFiles(onsuccess, onerror);

             function onsuccess(files) {
               for(var i = 0; i < files.length; i++) {
                 if(files[i].readOnly)
                   console.log("Cannot write to file " + files[i].name);
                 else
                   console.log("Can write to file " + files[i].name);
               }
             }

             function onerror(error) {
               console.log("The error " + error.message + " occurred when listing the files in the selected folder");
             }
  - name: isFile
    summary: |
        The file type.
        true if this handle is a file. false if this handle is a directory.
    type: Boolean
    permission: read-only

  - name: isDirectory
    summary: |
        The file type.
        true if this handle is a directory, false if this handle is a file.
    type: Boolean
    permission: read-only
    
  - name: created
    summary: |
        The creation timestamp of this file.
        This is the timestamp when the file was first created in the filesystem. Equivalent to the timestamp when a call to createFile() succeeds.
        If the platform does not support this attribute, it MUST be null.
        It is unspecified and platform-dependent if the creation timestamp changes when a file is moved.
    type: Date
    permission: read-only

  - name: modified
    summary: |
        The modification timestamp.
        The modification timestamp of this file. This is the timestamp of the most recent modification to the file, usually when the last write operation succeeded. Opening a file for reading does not change the modification timestamp.
        
        If the platform does not support this attribute, it MUST be null.
        
        It is unspecified and platform-dependent if the modified timestamp changes when a file is moved.
    type: Date
    permission: read-only
    examples:
      - example: |
            Ti.API.info(file.modified); // displays the modification timestamp

  - name: path
    summary: |
        The path of this file, excluding the file name.
        This is the path of this file, beginning with the name of the root containing the file, up to and including the directory containing the file, but excluding the file name.
        
        Except in a special case of the File representing the root itself, the last character is always the character '/'.
        
        For example, if a file is located at music/ramones/volume1/RockawayBeach.mp3, the path would be music/ramones/volume1/.
        
        For example, if a directory is located at music/ramones/volume1, the path would be music/ramones/.
        
        For the special case of the root, if the root is music, then the path is music.
    type: String
    permission: read-only
    examples:
      - example: |
            Ti.API.info(file.path); // should be 'music/' if the file is music/foo.mp3

  - name: name
    summary: |
        The file name, excluding any path components.
        This is the name of this file, excluding the root name and any other path components.
        
        For example, if a file is located at music/ramones/volume1/RockawayBeach.mp3, the name would be RockawayBeach.mp3.
        
        For example, if a directory is located at music/ramones/volume1, the name would be volume1.
        
        For the special case of the root itself, the name is an empty string.
    type: String
    permission: read-only
    examples:
      - example: |
            Ti.API.info(file.name); // should be foo.mp3 if the file path is music/foo.mp3

  - name: fullPath
    summary: |
        The full path of this file.
        The full path of this file, beginning with the name of the root containing the file, and including the name of the file or directory itself.
        
        For instance, for a file, if the file is located at music/ramones/volume1/RockawayBeach.mp3, then the fullPath is music/ramones/volume1/RockawayBeach.mp3.
        
        For a directory, if the directory is located at music/ramones/volume1, then the fullPath is music/ramones/volume1.
        
        For the special case of the root itself, if the root is music, then the fullPath is music.
        
        The fullPath is always equal to path + name.
    type: String
    permission: read-only
    examples:
      - example: |
            Ti.API.info(file.fullPath); // should be music/track1.mp3 if the file is music/track1.mp3

  - name: fileSize
    summary: |
        The size of this file, in bytes.
        If there's an attempt to read this attribute on a directory, undefined is returned. 
        To retrieve the number of files and directories contained in the directory, use the length attribute, instead.
    type: Number
    permission: read-only
    examples:
      - example: |
            Ti.API.info(file.fileSize); // displays the file size

  - name: length
    summary: |
        The number of files and directories contained in this file handle.
        If there's an attempt to read this attribute on a file, undefined is returned. 
        To retrieve the size of a file, use the fileSize attribute instead.
    type: Number
    permission: read-only
    examples:
      - example: |
            Ti.API.info(file.length); // '3' if the directory contains two files and one sub-directory

# Pseudo-type
---
name: FileFilter 
summary: Dictionary created to filter the items returned by the listFiles method.
description: |
    When this dictionary is passed in the listFiles method, the result-set of the listFiles method MUST only contain the file items entries that match the attribute values of the filter.
    A file item only matches the FileFilter object if all the attributes of the file item match all the attribute values of the filter which are defined (that is, only matching values other than undefined or null). 
    This is similar to an SQL "AND" operation.
    
    An attribute of the file entry matches the FileFilter attribute value in accordance with the following rules:
        - For FileFilter attributes of type DOMString, an entry matches this value only if its corresponding attribute is an exact match. If the filter contains U+0025 'PERCENT SIGN' it is interpreted as a wildcard character and '%' matches any string of any length, including no length. If wildcards are used, the behavior is similar to the LIKE condition in SQL. To specify that a 'PERCENT SIGN' character is to be considered literally instead of interpreting it as a wildcard, developers may escape it with the backslash character (\). The matching is not case sensitive, such as "FOO" matches a "foo" or an "f%" filter.
        - For File entry attributes of type Date, attributes start and end are included to allow filtering of File entries between two supplied dates. If either or both of these attributes are specified, the following rules apply: A) If both start and end dates are specified (that is, other than null), a File entry matches the filter if it's corresponding attribute is the same as either start or end or between the two supplied dates (that is, after start and before end). B) If only the start attribute contains a value (other than null), a File entry matches the filter if its corresponding attibute is later than or equal to the start one. C) If only the end date contains a value (other than null), a file matches the filter if its corresponding attribute is earlier than or equal to the end date.
platforms: [tizen]
properties:
  - name: name
    summary: |
        Used for filtering the File name attribute.
        
        Files which name corresponds with this attribute (either exactly or with the specified wildcards) match this filtering criteria.
    type: String
  - name:  startModified 
    summary: |
        Used for filtering the File modified attribute.
        Files with modified date later than this attribute or equal to it match the filtering criteria.                 
    type: Date
  - name: endModified
    summary: |
        Used for filtering the File created attribute.
        Files with modified date earlier than this attribute or equal to it match the filtering criteria.
    type: Date